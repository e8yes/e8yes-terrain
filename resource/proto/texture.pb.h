// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_texture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_texture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_texture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_texture_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_texture_2eproto;
namespace e8 {
class TextureProto;
class TextureProtoDefaultTypeInternal;
extern TextureProtoDefaultTypeInternal _TextureProto_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::TextureProto* Arena::CreateMaybeMessage<::e8::TextureProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

enum TextureProto_Encoding : int {
  TextureProto_Encoding_INVALID = 0,
  TextureProto_Encoding_BITMAP = 1,
  TextureProto_Encoding_PNG = 2,
  TextureProto_Encoding_TextureProto_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TextureProto_Encoding_TextureProto_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TextureProto_Encoding_IsValid(int value);
constexpr TextureProto_Encoding TextureProto_Encoding_Encoding_MIN = TextureProto_Encoding_INVALID;
constexpr TextureProto_Encoding TextureProto_Encoding_Encoding_MAX = TextureProto_Encoding_PNG;
constexpr int TextureProto_Encoding_Encoding_ARRAYSIZE = TextureProto_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureProto_Encoding_descriptor();
template<typename T>
inline const std::string& TextureProto_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextureProto_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextureProto_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextureProto_Encoding_descriptor(), enum_t_value);
}
inline bool TextureProto_Encoding_Parse(
    const std::string& name, TextureProto_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextureProto_Encoding>(
    TextureProto_Encoding_descriptor(), name, value);
}
// ===================================================================

class TextureProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.TextureProto) */ {
 public:
  inline TextureProto() : TextureProto(nullptr) {};
  virtual ~TextureProto();

  TextureProto(const TextureProto& from);
  TextureProto(TextureProto&& from) noexcept
    : TextureProto() {
    *this = ::std::move(from);
  }

  inline TextureProto& operator=(const TextureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureProto& operator=(TextureProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextureProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextureProto* internal_default_instance() {
    return reinterpret_cast<const TextureProto*>(
               &_TextureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextureProto& a, TextureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextureProto* New() const final {
    return CreateMaybeMessage<TextureProto>(nullptr);
  }

  TextureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextureProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextureProto& from);
  void MergeFrom(const TextureProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.TextureProto";
  }
  protected:
  explicit TextureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_texture_2eproto);
    return ::descriptor_table_texture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TextureProto_Encoding Encoding;
  static constexpr Encoding INVALID =
    TextureProto_Encoding_INVALID;
  static constexpr Encoding BITMAP =
    TextureProto_Encoding_BITMAP;
  static constexpr Encoding PNG =
    TextureProto_Encoding_PNG;
  static inline bool Encoding_IsValid(int value) {
    return TextureProto_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    TextureProto_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    TextureProto_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    TextureProto_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return TextureProto_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return TextureProto_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(const std::string& name,
      Encoding* value) {
    return TextureProto_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kEncodingFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kChannelCountFieldNumber = 4,
    kChannelSizeFieldNumber = 5,
  };
  // bytes data = 6;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .e8.TextureProto.Encoding encoding = 1;
  void clear_encoding();
  ::e8::TextureProto_Encoding encoding() const;
  void set_encoding(::e8::TextureProto_Encoding value);
  private:
  ::e8::TextureProto_Encoding _internal_encoding() const;
  void _internal_set_encoding(::e8::TextureProto_Encoding value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel_count = 4;
  void clear_channel_count();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_count() const;
  void set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_count() const;
  void _internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel_size = 5;
  void clear_channel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_size() const;
  void set_channel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_size() const;
  void _internal_set_channel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:e8.TextureProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int encoding_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_texture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextureProto

// .e8.TextureProto.Encoding encoding = 1;
inline void TextureProto::clear_encoding() {
  encoding_ = 0;
}
inline ::e8::TextureProto_Encoding TextureProto::_internal_encoding() const {
  return static_cast< ::e8::TextureProto_Encoding >(encoding_);
}
inline ::e8::TextureProto_Encoding TextureProto::encoding() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.encoding)
  return _internal_encoding();
}
inline void TextureProto::_internal_set_encoding(::e8::TextureProto_Encoding value) {
  
  encoding_ = value;
}
inline void TextureProto::set_encoding(::e8::TextureProto_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.encoding)
}

// int32 width = 2;
inline void TextureProto::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::width() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.width)
  return _internal_width();
}
inline void TextureProto::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void TextureProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.width)
}

// int32 height = 3;
inline void TextureProto::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::height() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.height)
  return _internal_height();
}
inline void TextureProto::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void TextureProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.height)
}

// int32 channel_count = 4;
inline void TextureProto::clear_channel_count() {
  channel_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::_internal_channel_count() const {
  return channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::channel_count() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.channel_count)
  return _internal_channel_count();
}
inline void TextureProto::_internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_count_ = value;
}
inline void TextureProto::set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_count(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.channel_count)
}

// int32 channel_size = 5;
inline void TextureProto::clear_channel_size() {
  channel_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::_internal_channel_size() const {
  return channel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextureProto::channel_size() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.channel_size)
  return _internal_channel_size();
}
inline void TextureProto::_internal_set_channel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_size_ = value;
}
inline void TextureProto::set_channel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_size(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.channel_size)
}

// bytes data = 6;
inline void TextureProto::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextureProto::data() const {
  // @@protoc_insertion_point(field_get:e8.TextureProto.data)
  return _internal_data();
}
inline void TextureProto::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:e8.TextureProto.data)
}
inline std::string* TextureProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable:e8.TextureProto.data)
  return _internal_mutable_data();
}
inline const std::string& TextureProto::_internal_data() const {
  return data_.Get();
}
inline void TextureProto::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextureProto::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.TextureProto.data)
}
inline void TextureProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.TextureProto.data)
}
inline void TextureProto::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.TextureProto.data)
}
inline std::string* TextureProto::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextureProto::release_data() {
  // @@protoc_insertion_point(field_release:e8.TextureProto.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextureProto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.TextureProto.data)
}
inline std::string* TextureProto::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.TextureProto.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TextureProto::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.TextureProto.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::e8::TextureProto_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::TextureProto_Encoding>() {
  return ::e8::TextureProto_Encoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_texture_2eproto

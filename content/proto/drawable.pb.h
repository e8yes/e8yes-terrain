// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drawable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_drawable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_drawable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "primitive.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drawable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_drawable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_drawable_2eproto;
namespace e8 {
class Drawable;
class DrawableDefaultTypeInternal;
extern DrawableDefaultTypeInternal _Drawable_default_instance_;
class DrawableLod;
class DrawableLodDefaultTypeInternal;
extern DrawableLodDefaultTypeInternal _DrawableLod_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::Drawable* Arena::CreateMaybeMessage<::e8::Drawable>(Arena*);
template<> ::e8::DrawableLod* Arena::CreateMaybeMessage<::e8::DrawableLod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

enum Drawable_RigidityType : int {
  Drawable_RigidityType_INVALID = 0,
  Drawable_RigidityType_STATIC = 1,
  Drawable_RigidityType_RIGID = 2,
  Drawable_RigidityType_DEFORMABLE = 3,
  Drawable_RigidityType_TEARABLE = 4,
  Drawable_RigidityType_Drawable_RigidityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Drawable_RigidityType_Drawable_RigidityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Drawable_RigidityType_IsValid(int value);
constexpr Drawable_RigidityType Drawable_RigidityType_RigidityType_MIN = Drawable_RigidityType_INVALID;
constexpr Drawable_RigidityType Drawable_RigidityType_RigidityType_MAX = Drawable_RigidityType_TEARABLE;
constexpr int Drawable_RigidityType_RigidityType_ARRAYSIZE = Drawable_RigidityType_RigidityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Drawable_RigidityType_descriptor();
template<typename T>
inline const std::string& Drawable_RigidityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Drawable_RigidityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Drawable_RigidityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Drawable_RigidityType_descriptor(), enum_t_value);
}
inline bool Drawable_RigidityType_Parse(
    const std::string& name, Drawable_RigidityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Drawable_RigidityType>(
    Drawable_RigidityType_descriptor(), name, value);
}
// ===================================================================

class Drawable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.Drawable) */ {
 public:
  inline Drawable() : Drawable(nullptr) {};
  virtual ~Drawable();

  Drawable(const Drawable& from);
  Drawable(Drawable&& from) noexcept
    : Drawable() {
    *this = ::std::move(from);
  }

  inline Drawable& operator=(const Drawable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Drawable& operator=(Drawable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Drawable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Drawable* internal_default_instance() {
    return reinterpret_cast<const Drawable*>(
               &_Drawable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Drawable& a, Drawable& b) {
    a.Swap(&b);
  }
  inline void Swap(Drawable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Drawable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Drawable* New() const final {
    return CreateMaybeMessage<Drawable>(nullptr);
  }

  Drawable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Drawable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Drawable& from);
  void MergeFrom(const Drawable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drawable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.Drawable";
  }
  protected:
  explicit Drawable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drawable_2eproto);
    return ::descriptor_table_drawable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Drawable_RigidityType RigidityType;
  static constexpr RigidityType INVALID =
    Drawable_RigidityType_INVALID;
  static constexpr RigidityType STATIC =
    Drawable_RigidityType_STATIC;
  static constexpr RigidityType RIGID =
    Drawable_RigidityType_RIGID;
  static constexpr RigidityType DEFORMABLE =
    Drawable_RigidityType_DEFORMABLE;
  static constexpr RigidityType TEARABLE =
    Drawable_RigidityType_TEARABLE;
  static inline bool RigidityType_IsValid(int value) {
    return Drawable_RigidityType_IsValid(value);
  }
  static constexpr RigidityType RigidityType_MIN =
    Drawable_RigidityType_RigidityType_MIN;
  static constexpr RigidityType RigidityType_MAX =
    Drawable_RigidityType_RigidityType_MAX;
  static constexpr int RigidityType_ARRAYSIZE =
    Drawable_RigidityType_RigidityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RigidityType_descriptor() {
    return Drawable_RigidityType_descriptor();
  }
  template<typename T>
  static inline const std::string& RigidityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RigidityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RigidityType_Name.");
    return Drawable_RigidityType_Name(enum_t_value);
  }
  static inline bool RigidityType_Parse(const std::string& name,
      RigidityType* value) {
    return Drawable_RigidityType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 3,
    kPrimitivesFieldNumber = 4,
    kHumanReadableNameFieldNumber = 1,
    kRigidityFieldNumber = 2,
  };
  // repeated .e8.PrimitiveVertex vertices = 3;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::e8::PrimitiveVertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveVertex >*
      mutable_vertices();
  private:
  const ::e8::PrimitiveVertex& _internal_vertices(int index) const;
  ::e8::PrimitiveVertex* _internal_add_vertices();
  public:
  const ::e8::PrimitiveVertex& vertices(int index) const;
  ::e8::PrimitiveVertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveVertex >&
      vertices() const;

  // repeated .e8.PrimitiveIndices primitives = 4;
  int primitives_size() const;
  private:
  int _internal_primitives_size() const;
  public:
  void clear_primitives();
  ::e8::PrimitiveIndices* mutable_primitives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveIndices >*
      mutable_primitives();
  private:
  const ::e8::PrimitiveIndices& _internal_primitives(int index) const;
  ::e8::PrimitiveIndices* _internal_add_primitives();
  public:
  const ::e8::PrimitiveIndices& primitives(int index) const;
  ::e8::PrimitiveIndices* add_primitives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveIndices >&
      primitives() const;

  // string human_readable_name = 1;
  void clear_human_readable_name();
  const std::string& human_readable_name() const;
  void set_human_readable_name(const std::string& value);
  void set_human_readable_name(std::string&& value);
  void set_human_readable_name(const char* value);
  void set_human_readable_name(const char* value, size_t size);
  std::string* mutable_human_readable_name();
  std::string* release_human_readable_name();
  void set_allocated_human_readable_name(std::string* human_readable_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_human_readable_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_human_readable_name(
      std::string* human_readable_name);
  private:
  const std::string& _internal_human_readable_name() const;
  void _internal_set_human_readable_name(const std::string& value);
  std::string* _internal_mutable_human_readable_name();
  public:

  // .e8.Drawable.RigidityType rigidity = 2;
  void clear_rigidity();
  ::e8::Drawable_RigidityType rigidity() const;
  void set_rigidity(::e8::Drawable_RigidityType value);
  private:
  ::e8::Drawable_RigidityType _internal_rigidity() const;
  void _internal_set_rigidity(::e8::Drawable_RigidityType value);
  public:

  // @@protoc_insertion_point(class_scope:e8.Drawable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveVertex > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveIndices > primitives_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr human_readable_name_;
  int rigidity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drawable_2eproto;
};
// -------------------------------------------------------------------

class DrawableLod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.DrawableLod) */ {
 public:
  inline DrawableLod() : DrawableLod(nullptr) {};
  virtual ~DrawableLod();

  DrawableLod(const DrawableLod& from);
  DrawableLod(DrawableLod&& from) noexcept
    : DrawableLod() {
    *this = ::std::move(from);
  }

  inline DrawableLod& operator=(const DrawableLod& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableLod& operator=(DrawableLod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableLod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableLod* internal_default_instance() {
    return reinterpret_cast<const DrawableLod*>(
               &_DrawableLod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DrawableLod& a, DrawableLod& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableLod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableLod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableLod* New() const final {
    return CreateMaybeMessage<DrawableLod>(nullptr);
  }

  DrawableLod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableLod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableLod& from);
  void MergeFrom(const DrawableLod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableLod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.DrawableLod";
  }
  protected:
  explicit DrawableLod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_drawable_2eproto);
    return ::descriptor_table_drawable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawableLodFieldNumber = 2,
    kMinDistancesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .e8.Drawable drawable_lod = 2;
  int drawable_lod_size() const;
  private:
  int _internal_drawable_lod_size() const;
  public:
  void clear_drawable_lod();
  ::e8::Drawable* mutable_drawable_lod(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::Drawable >*
      mutable_drawable_lod();
  private:
  const ::e8::Drawable& _internal_drawable_lod(int index) const;
  ::e8::Drawable* _internal_add_drawable_lod();
  public:
  const ::e8::Drawable& drawable_lod(int index) const;
  ::e8::Drawable* add_drawable_lod();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::Drawable >&
      drawable_lod() const;

  // repeated float min_distances = 3;
  int min_distances_size() const;
  private:
  int _internal_min_distances_size() const;
  public:
  void clear_min_distances();
  private:
  float _internal_min_distances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_min_distances() const;
  void _internal_add_min_distances(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_min_distances();
  public:
  float min_distances(int index) const;
  void set_min_distances(int index, float value);
  void add_min_distances(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      min_distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_min_distances();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:e8.DrawableLod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::Drawable > drawable_lod_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > min_distances_;
  mutable std::atomic<int> _min_distances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_drawable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Drawable

// string human_readable_name = 1;
inline void Drawable::clear_human_readable_name() {
  human_readable_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Drawable::human_readable_name() const {
  // @@protoc_insertion_point(field_get:e8.Drawable.human_readable_name)
  return _internal_human_readable_name();
}
inline void Drawable::set_human_readable_name(const std::string& value) {
  _internal_set_human_readable_name(value);
  // @@protoc_insertion_point(field_set:e8.Drawable.human_readable_name)
}
inline std::string* Drawable::mutable_human_readable_name() {
  // @@protoc_insertion_point(field_mutable:e8.Drawable.human_readable_name)
  return _internal_mutable_human_readable_name();
}
inline const std::string& Drawable::_internal_human_readable_name() const {
  return human_readable_name_.Get();
}
inline void Drawable::_internal_set_human_readable_name(const std::string& value) {
  
  human_readable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Drawable::set_human_readable_name(std::string&& value) {
  
  human_readable_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.Drawable.human_readable_name)
}
inline void Drawable::set_human_readable_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  human_readable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.Drawable.human_readable_name)
}
inline void Drawable::set_human_readable_name(const char* value,
    size_t size) {
  
  human_readable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.Drawable.human_readable_name)
}
inline std::string* Drawable::_internal_mutable_human_readable_name() {
  
  return human_readable_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Drawable::release_human_readable_name() {
  // @@protoc_insertion_point(field_release:e8.Drawable.human_readable_name)
  return human_readable_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drawable::set_allocated_human_readable_name(std::string* human_readable_name) {
  if (human_readable_name != nullptr) {
    
  } else {
    
  }
  human_readable_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), human_readable_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.Drawable.human_readable_name)
}
inline std::string* Drawable::unsafe_arena_release_human_readable_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.Drawable.human_readable_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return human_readable_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Drawable::unsafe_arena_set_allocated_human_readable_name(
    std::string* human_readable_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (human_readable_name != nullptr) {
    
  } else {
    
  }
  human_readable_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      human_readable_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.Drawable.human_readable_name)
}

// .e8.Drawable.RigidityType rigidity = 2;
inline void Drawable::clear_rigidity() {
  rigidity_ = 0;
}
inline ::e8::Drawable_RigidityType Drawable::_internal_rigidity() const {
  return static_cast< ::e8::Drawable_RigidityType >(rigidity_);
}
inline ::e8::Drawable_RigidityType Drawable::rigidity() const {
  // @@protoc_insertion_point(field_get:e8.Drawable.rigidity)
  return _internal_rigidity();
}
inline void Drawable::_internal_set_rigidity(::e8::Drawable_RigidityType value) {
  
  rigidity_ = value;
}
inline void Drawable::set_rigidity(::e8::Drawable_RigidityType value) {
  _internal_set_rigidity(value);
  // @@protoc_insertion_point(field_set:e8.Drawable.rigidity)
}

// repeated .e8.PrimitiveVertex vertices = 3;
inline int Drawable::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Drawable::vertices_size() const {
  return _internal_vertices_size();
}
inline ::e8::PrimitiveVertex* Drawable::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:e8.Drawable.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveVertex >*
Drawable::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:e8.Drawable.vertices)
  return &vertices_;
}
inline const ::e8::PrimitiveVertex& Drawable::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::e8::PrimitiveVertex& Drawable::vertices(int index) const {
  // @@protoc_insertion_point(field_get:e8.Drawable.vertices)
  return _internal_vertices(index);
}
inline ::e8::PrimitiveVertex* Drawable::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::e8::PrimitiveVertex* Drawable::add_vertices() {
  // @@protoc_insertion_point(field_add:e8.Drawable.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveVertex >&
Drawable::vertices() const {
  // @@protoc_insertion_point(field_list:e8.Drawable.vertices)
  return vertices_;
}

// repeated .e8.PrimitiveIndices primitives = 4;
inline int Drawable::_internal_primitives_size() const {
  return primitives_.size();
}
inline int Drawable::primitives_size() const {
  return _internal_primitives_size();
}
inline ::e8::PrimitiveIndices* Drawable::mutable_primitives(int index) {
  // @@protoc_insertion_point(field_mutable:e8.Drawable.primitives)
  return primitives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveIndices >*
Drawable::mutable_primitives() {
  // @@protoc_insertion_point(field_mutable_list:e8.Drawable.primitives)
  return &primitives_;
}
inline const ::e8::PrimitiveIndices& Drawable::_internal_primitives(int index) const {
  return primitives_.Get(index);
}
inline const ::e8::PrimitiveIndices& Drawable::primitives(int index) const {
  // @@protoc_insertion_point(field_get:e8.Drawable.primitives)
  return _internal_primitives(index);
}
inline ::e8::PrimitiveIndices* Drawable::_internal_add_primitives() {
  return primitives_.Add();
}
inline ::e8::PrimitiveIndices* Drawable::add_primitives() {
  // @@protoc_insertion_point(field_add:e8.Drawable.primitives)
  return _internal_add_primitives();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::PrimitiveIndices >&
Drawable::primitives() const {
  // @@protoc_insertion_point(field_list:e8.Drawable.primitives)
  return primitives_;
}

// -------------------------------------------------------------------

// DrawableLod

// string id = 1;
inline void DrawableLod::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DrawableLod::id() const {
  // @@protoc_insertion_point(field_get:e8.DrawableLod.id)
  return _internal_id();
}
inline void DrawableLod::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:e8.DrawableLod.id)
}
inline std::string* DrawableLod::mutable_id() {
  // @@protoc_insertion_point(field_mutable:e8.DrawableLod.id)
  return _internal_mutable_id();
}
inline const std::string& DrawableLod::_internal_id() const {
  return id_.Get();
}
inline void DrawableLod::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawableLod::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.DrawableLod.id)
}
inline void DrawableLod::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.DrawableLod.id)
}
inline void DrawableLod::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.DrawableLod.id)
}
inline std::string* DrawableLod::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawableLod::release_id() {
  // @@protoc_insertion_point(field_release:e8.DrawableLod.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableLod::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.DrawableLod.id)
}
inline std::string* DrawableLod::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.DrawableLod.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DrawableLod::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.DrawableLod.id)
}

// repeated .e8.Drawable drawable_lod = 2;
inline int DrawableLod::_internal_drawable_lod_size() const {
  return drawable_lod_.size();
}
inline int DrawableLod::drawable_lod_size() const {
  return _internal_drawable_lod_size();
}
inline void DrawableLod::clear_drawable_lod() {
  drawable_lod_.Clear();
}
inline ::e8::Drawable* DrawableLod::mutable_drawable_lod(int index) {
  // @@protoc_insertion_point(field_mutable:e8.DrawableLod.drawable_lod)
  return drawable_lod_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::Drawable >*
DrawableLod::mutable_drawable_lod() {
  // @@protoc_insertion_point(field_mutable_list:e8.DrawableLod.drawable_lod)
  return &drawable_lod_;
}
inline const ::e8::Drawable& DrawableLod::_internal_drawable_lod(int index) const {
  return drawable_lod_.Get(index);
}
inline const ::e8::Drawable& DrawableLod::drawable_lod(int index) const {
  // @@protoc_insertion_point(field_get:e8.DrawableLod.drawable_lod)
  return _internal_drawable_lod(index);
}
inline ::e8::Drawable* DrawableLod::_internal_add_drawable_lod() {
  return drawable_lod_.Add();
}
inline ::e8::Drawable* DrawableLod::add_drawable_lod() {
  // @@protoc_insertion_point(field_add:e8.DrawableLod.drawable_lod)
  return _internal_add_drawable_lod();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::Drawable >&
DrawableLod::drawable_lod() const {
  // @@protoc_insertion_point(field_list:e8.DrawableLod.drawable_lod)
  return drawable_lod_;
}

// repeated float min_distances = 3;
inline int DrawableLod::_internal_min_distances_size() const {
  return min_distances_.size();
}
inline int DrawableLod::min_distances_size() const {
  return _internal_min_distances_size();
}
inline void DrawableLod::clear_min_distances() {
  min_distances_.Clear();
}
inline float DrawableLod::_internal_min_distances(int index) const {
  return min_distances_.Get(index);
}
inline float DrawableLod::min_distances(int index) const {
  // @@protoc_insertion_point(field_get:e8.DrawableLod.min_distances)
  return _internal_min_distances(index);
}
inline void DrawableLod::set_min_distances(int index, float value) {
  min_distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:e8.DrawableLod.min_distances)
}
inline void DrawableLod::_internal_add_min_distances(float value) {
  min_distances_.Add(value);
}
inline void DrawableLod::add_min_distances(float value) {
  _internal_add_min_distances(value);
  // @@protoc_insertion_point(field_add:e8.DrawableLod.min_distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawableLod::_internal_min_distances() const {
  return min_distances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawableLod::min_distances() const {
  // @@protoc_insertion_point(field_list:e8.DrawableLod.min_distances)
  return _internal_min_distances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawableLod::_internal_mutable_min_distances() {
  return &min_distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawableLod::mutable_min_distances() {
  // @@protoc_insertion_point(field_mutable_list:e8.DrawableLod.min_distances)
  return _internal_mutable_min_distances();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::e8::Drawable_RigidityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::Drawable_RigidityType>() {
  return ::e8::Drawable_RigidityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_drawable_2eproto

/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "drawable.proto";
import "entity.proto";
import "physical_shape.proto";

/**
 * @brief The SceneObjectProto message This is a serializable version of the SceneObject object. It
 * logically groups a set of entities into a hierarchy (tree).
 */
message SceneObjectProto {
    /*
     * @brief The SceneObjectChildren message An internal tree node.
     */
    message SceneObjectChildren {
        // Child scene objects.
        repeated SceneObjectProto scene_objects = 1;
    }

    /*
     * @brief The SceneEntityChildren message An external tree node.
     */
    message SceneEntityChildren {
        // Child scene entities.
        repeated SceneEntityProto scene_entities = 1;
    }

    // ID of this scene object.
    string id = 1;

    // Human readable name of this scene object.
    string name = 2;

    // If this field isn't null, it indicates that this scene object is generated procedural
    // process. The process is fully specified by the procedural object referenced by this ID.
    string procedural_object_id = 3;

    // Child nodes.
    oneof children {
        // Internal child nodes pointing to a sub-scene-object.
        SceneObjectChildren scene_object_children = 4;

        // External child nodes pointing to a list of scene entities.
        SceneEntityChildren scene_entity_children = 5;
    }
};

/*
 * @brief The SceneObjectCollection message Encapsulates full information about a collection of
 * scene objects.
 */
message SceneObjectCollection {
    // An array of root scene objects.
    repeated SceneObjectProto scene_objects = 1;

    // A collection of all drawables referenced by entities.
    map<string, DrawableLod> drawables = 2;

    // A collection of all physical shapes referenced by the entities.
    map<string, PhysicalShapeProto> physical_shapes = 3;
};

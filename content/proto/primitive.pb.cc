// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive.proto

#include "primitive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace e8 {
class PrimitiveVertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrimitiveVertex> _instance;
} _PrimitiveVertex_default_instance_;
class PrimitiveIndicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrimitiveIndices> _instance;
} _PrimitiveIndices_default_instance_;
class AABBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AABB> _instance;
} _AABB_default_instance_;
}  // namespace e8
static void InitDefaultsscc_info_AABB_primitive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_AABB_default_instance_;
    new (ptr) ::e8::AABB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::AABB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AABB_primitive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AABB_primitive_2eproto}, {}};

static void InitDefaultsscc_info_PrimitiveIndices_primitive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_PrimitiveIndices_default_instance_;
    new (ptr) ::e8::PrimitiveIndices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::PrimitiveIndices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrimitiveIndices_primitive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrimitiveIndices_primitive_2eproto}, {}};

static void InitDefaultsscc_info_PrimitiveVertex_primitive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_PrimitiveVertex_default_instance_;
    new (ptr) ::e8::PrimitiveVertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::PrimitiveVertex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrimitiveVertex_primitive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrimitiveVertex_primitive_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_primitive_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_primitive_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_primitive_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_primitive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveVertex, position_),
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveVertex, normal_),
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveVertex, texcoord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::PrimitiveIndices, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::AABB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::AABB, min_),
  PROTOBUF_FIELD_OFFSET(::e8::AABB, max_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::PrimitiveVertex)},
  { 8, -1, sizeof(::e8::PrimitiveIndices)},
  { 14, -1, sizeof(::e8::AABB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_PrimitiveVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_PrimitiveIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_AABB_default_instance_),
};

const char descriptor_table_protodef_primitive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017primitive.proto\022\002e8\"E\n\017PrimitiveVertex"
  "\022\020\n\010position\030\001 \003(\002\022\016\n\006normal\030\002 \003(\002\022\020\n\010te"
  "xcoord\030\003 \003(\002\"#\n\020PrimitiveIndices\022\017\n\007indi"
  "ces\030\001 \003(\005\" \n\004AABB\022\013\n\003min\030\001 \003(\002\022\013\n\003max\030\002 "
  "\003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_primitive_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_primitive_2eproto_sccs[3] = {
  &scc_info_AABB_primitive_2eproto.base,
  &scc_info_PrimitiveIndices_primitive_2eproto.base,
  &scc_info_PrimitiveVertex_primitive_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_primitive_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_primitive_2eproto = {
  false, false, descriptor_table_protodef_primitive_2eproto, "primitive.proto", 171,
  &descriptor_table_primitive_2eproto_once, descriptor_table_primitive_2eproto_sccs, descriptor_table_primitive_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_primitive_2eproto::offsets,
  file_level_metadata_primitive_2eproto, 3, file_level_enum_descriptors_primitive_2eproto, file_level_service_descriptors_primitive_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_primitive_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_primitive_2eproto)), true);
namespace e8 {

// ===================================================================

void PrimitiveVertex::InitAsDefaultInstance() {
}
class PrimitiveVertex::_Internal {
 public:
};

PrimitiveVertex::PrimitiveVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  normal_(arena),
  texcoord_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.PrimitiveVertex)
}
PrimitiveVertex::PrimitiveVertex(const PrimitiveVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      normal_(from.normal_),
      texcoord_(from.texcoord_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:e8.PrimitiveVertex)
}

void PrimitiveVertex::SharedCtor() {
}

PrimitiveVertex::~PrimitiveVertex() {
  // @@protoc_insertion_point(destructor:e8.PrimitiveVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrimitiveVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrimitiveVertex::ArenaDtor(void* object) {
  PrimitiveVertex* _this = reinterpret_cast< PrimitiveVertex* >(object);
  (void)_this;
}
void PrimitiveVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimitiveVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimitiveVertex& PrimitiveVertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrimitiveVertex_primitive_2eproto.base);
  return *internal_default_instance();
}


void PrimitiveVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.PrimitiveVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  normal_.Clear();
  texcoord_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_normal(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_normal(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float texcoord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_texcoord(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_texcoord(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrimitiveVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.PrimitiveVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_position(), target);
  }

  // repeated float normal = 2;
  if (this->_internal_normal_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_normal(), target);
  }

  // repeated float texcoord = 3;
  if (this->_internal_texcoord_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_texcoord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.PrimitiveVertex)
  return target;
}

size_t PrimitiveVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.PrimitiveVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float normal = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normal_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _normal_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float texcoord = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_texcoord_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _texcoord_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.PrimitiveVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimitiveVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrimitiveVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.PrimitiveVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.PrimitiveVertex)
    MergeFrom(*source);
  }
}

void PrimitiveVertex::MergeFrom(const PrimitiveVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.PrimitiveVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  normal_.MergeFrom(from.normal_);
  texcoord_.MergeFrom(from.texcoord_);
}

void PrimitiveVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.PrimitiveVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveVertex::CopyFrom(const PrimitiveVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.PrimitiveVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveVertex::IsInitialized() const {
  return true;
}

void PrimitiveVertex::InternalSwap(PrimitiveVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  normal_.InternalSwap(&other->normal_);
  texcoord_.InternalSwap(&other->texcoord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrimitiveIndices::InitAsDefaultInstance() {
}
class PrimitiveIndices::_Internal {
 public:
};

PrimitiveIndices::PrimitiveIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.PrimitiveIndices)
}
PrimitiveIndices::PrimitiveIndices(const PrimitiveIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:e8.PrimitiveIndices)
}

void PrimitiveIndices::SharedCtor() {
}

PrimitiveIndices::~PrimitiveIndices() {
  // @@protoc_insertion_point(destructor:e8.PrimitiveIndices)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrimitiveIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrimitiveIndices::ArenaDtor(void* object) {
  PrimitiveIndices* _this = reinterpret_cast< PrimitiveIndices* >(object);
  (void)_this;
}
void PrimitiveIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimitiveIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimitiveIndices& PrimitiveIndices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrimitiveIndices_primitive_2eproto.base);
  return *internal_default_instance();
}


void PrimitiveIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.PrimitiveIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimitiveIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrimitiveIndices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.PrimitiveIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.PrimitiveIndices)
  return target;
}

size_t PrimitiveIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.PrimitiveIndices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveIndices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.PrimitiveIndices)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimitiveIndices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrimitiveIndices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.PrimitiveIndices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.PrimitiveIndices)
    MergeFrom(*source);
  }
}

void PrimitiveIndices::MergeFrom(const PrimitiveIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.PrimitiveIndices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
}

void PrimitiveIndices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.PrimitiveIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveIndices::CopyFrom(const PrimitiveIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.PrimitiveIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveIndices::IsInitialized() const {
  return true;
}

void PrimitiveIndices::InternalSwap(PrimitiveIndices* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimitiveIndices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AABB::InitAsDefaultInstance() {
}
class AABB::_Internal {
 public:
};

AABB::AABB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  min_(arena),
  max_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.AABB)
}
AABB::AABB(const AABB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      min_(from.min_),
      max_(from.max_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:e8.AABB)
}

void AABB::SharedCtor() {
}

AABB::~AABB() {
  // @@protoc_insertion_point(destructor:e8.AABB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AABB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AABB::ArenaDtor(void* object) {
  AABB* _this = reinterpret_cast< AABB* >(object);
  (void)_this;
}
void AABB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AABB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AABB& AABB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AABB_primitive_2eproto.base);
  return *internal_default_instance();
}


void AABB::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.AABB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_.Clear();
  max_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AABB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AABB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.AABB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float min = 1;
  if (this->_internal_min_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_min(), target);
  }

  // repeated float max = 2;
  if (this->_internal_max_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.AABB)
  return target;
}

size_t AABB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.AABB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _min_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float max = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AABB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.AABB)
  GOOGLE_DCHECK_NE(&from, this);
  const AABB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AABB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.AABB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.AABB)
    MergeFrom(*source);
  }
}

void AABB::MergeFrom(const AABB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.AABB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_.MergeFrom(from.min_);
  max_.MergeFrom(from.max_);
}

void AABB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.AABB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AABB::CopyFrom(const AABB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.AABB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AABB::IsInitialized() const {
  return true;
}

void AABB::InternalSwap(AABB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  min_.InternalSwap(&other->min_);
  max_.InternalSwap(&other->max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AABB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::e8::PrimitiveVertex* Arena::CreateMaybeMessage< ::e8::PrimitiveVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::PrimitiveVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::PrimitiveIndices* Arena::CreateMaybeMessage< ::e8::PrimitiveIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::PrimitiveIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::AABB* Arena::CreateMaybeMessage< ::e8::AABB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::AABB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

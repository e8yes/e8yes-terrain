// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: procedural_object.proto

#include "procedural_object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_procedural_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProceduralShapeProto_procedural_5fshape_2eproto;
namespace e8 {
class ProceduralObjectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProceduralObjectProto> _instance;
} _ProceduralObjectProto_default_instance_;
}  // namespace e8
static void InitDefaultsscc_info_ProceduralObjectProto_procedural_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_ProceduralObjectProto_default_instance_;
    new (ptr) ::e8::ProceduralObjectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::ProceduralObjectProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProceduralObjectProto_procedural_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProceduralObjectProto_procedural_5fobject_2eproto}, {
      &scc_info_ProceduralShapeProto_procedural_5fshape_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_procedural_5fobject_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_procedural_5fobject_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_procedural_5fobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_procedural_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, id_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, name_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, type_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, movable_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralObjectProto, shapes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::ProceduralObjectProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_ProceduralObjectProto_default_instance_),
};

const char descriptor_table_protodef_procedural_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027procedural_object.proto\022\002e8\032\026procedura"
  "l_shape.proto\"\357\001\n\025ProceduralObjectProto\022"
  "\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022<\n\004type\030\003 \001(\0162"
  "..e8.ProceduralObjectProto.ProceduralObj"
  "ectType\022\017\n\007movable\030\004 \001(\010\022(\n\006shapes\030\005 \003(\013"
  "2\030.e8.ProceduralShapeProto\"C\n\024Procedural"
  "ObjectType\022\013\n\007INVALID\020\000\022\t\n\005PLANE\020\001\022\007\n\003BO"
  "X\020\002\022\n\n\006SPHERE\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_procedural_5fobject_2eproto_deps[1] = {
  &::descriptor_table_procedural_5fshape_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_procedural_5fobject_2eproto_sccs[1] = {
  &scc_info_ProceduralObjectProto_procedural_5fobject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_procedural_5fobject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_procedural_5fobject_2eproto = {
  false, false, descriptor_table_protodef_procedural_5fobject_2eproto, "procedural_object.proto", 303,
  &descriptor_table_procedural_5fobject_2eproto_once, descriptor_table_procedural_5fobject_2eproto_sccs, descriptor_table_procedural_5fobject_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_procedural_5fobject_2eproto::offsets,
  file_level_metadata_procedural_5fobject_2eproto, 1, file_level_enum_descriptors_procedural_5fobject_2eproto, file_level_service_descriptors_procedural_5fobject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_procedural_5fobject_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_procedural_5fobject_2eproto)), true);
namespace e8 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProceduralObjectProto_ProceduralObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_procedural_5fobject_2eproto);
  return file_level_enum_descriptors_procedural_5fobject_2eproto[0];
}
bool ProceduralObjectProto_ProceduralObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::INVALID;
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::PLANE;
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::BOX;
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::SPHERE;
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::ProceduralObjectType_MIN;
constexpr ProceduralObjectProto_ProceduralObjectType ProceduralObjectProto::ProceduralObjectType_MAX;
constexpr int ProceduralObjectProto::ProceduralObjectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ProceduralObjectProto::InitAsDefaultInstance() {
}
class ProceduralObjectProto::_Internal {
 public:
};

void ProceduralObjectProto::clear_shapes() {
  shapes_.Clear();
}
ProceduralObjectProto::ProceduralObjectProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shapes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.ProceduralObjectProto)
}
ProceduralObjectProto::ProceduralObjectProto(const ProceduralObjectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&movable_) -
    reinterpret_cast<char*>(&id_)) + sizeof(movable_));
  // @@protoc_insertion_point(copy_constructor:e8.ProceduralObjectProto)
}

void ProceduralObjectProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProceduralObjectProto_procedural_5fobject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movable_) -
      reinterpret_cast<char*>(&id_)) + sizeof(movable_));
}

ProceduralObjectProto::~ProceduralObjectProto() {
  // @@protoc_insertion_point(destructor:e8.ProceduralObjectProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProceduralObjectProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProceduralObjectProto::ArenaDtor(void* object) {
  ProceduralObjectProto* _this = reinterpret_cast< ProceduralObjectProto* >(object);
  (void)_this;
}
void ProceduralObjectProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProceduralObjectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProceduralObjectProto& ProceduralObjectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProceduralObjectProto_procedural_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ProceduralObjectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.ProceduralObjectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movable_) -
      reinterpret_cast<char*>(&id_)) + sizeof(movable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProceduralObjectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "e8.ProceduralObjectProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.ProceduralObjectProto.ProceduralObjectType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::e8::ProceduralObjectProto_ProceduralObjectType>(val));
        } else goto handle_unusual;
        continue;
      // bool movable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          movable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .e8.ProceduralShapeProto shapes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProceduralObjectProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.ProceduralObjectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "e8.ProceduralObjectProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .e8.ProceduralObjectProto.ProceduralObjectType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bool movable = 4;
  if (this->movable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_movable(), target);
  }

  // repeated .e8.ProceduralShapeProto shapes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.ProceduralObjectProto)
  return target;
}

size_t ProceduralObjectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.ProceduralObjectProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .e8.ProceduralShapeProto shapes = 5;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .e8.ProceduralObjectProto.ProceduralObjectType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool movable = 4;
  if (this->movable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProceduralObjectProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.ProceduralObjectProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProceduralObjectProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProceduralObjectProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.ProceduralObjectProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.ProceduralObjectProto)
    MergeFrom(*source);
  }
}

void ProceduralObjectProto::MergeFrom(const ProceduralObjectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.ProceduralObjectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.movable() != 0) {
    _internal_set_movable(from._internal_movable());
  }
}

void ProceduralObjectProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.ProceduralObjectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceduralObjectProto::CopyFrom(const ProceduralObjectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.ProceduralObjectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceduralObjectProto::IsInitialized() const {
  return true;
}

void ProceduralObjectProto::InternalSwap(ProceduralObjectProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProceduralObjectProto, movable_)
      + sizeof(ProceduralObjectProto::movable_)
      - PROTOBUF_FIELD_OFFSET(ProceduralObjectProto, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProceduralObjectProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::e8::ProceduralObjectProto* Arena::CreateMaybeMessage< ::e8::ProceduralObjectProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::ProceduralObjectProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

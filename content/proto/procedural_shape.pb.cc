// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: procedural_shape.proto

#include "procedural_shape.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_procedural_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralBoxProto_procedural_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_procedural_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralPlaneProto_procedural_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_procedural_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralSphereProto_procedural_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_primitive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SrtTransform_primitive_2eproto;
namespace e8 {
class ProceduralPlaneProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProceduralPlaneProto> _instance;
} _ProceduralPlaneProto_default_instance_;
class ProceduralBoxProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProceduralBoxProto> _instance;
} _ProceduralBoxProto_default_instance_;
class ProceduralSphereProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProceduralSphereProto> _instance;
} _ProceduralSphereProto_default_instance_;
class ProceduralShapeProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProceduralShapeProto> _instance;
  const ::e8::ProceduralPlaneProto* plane_;
  const ::e8::ProceduralBoxProto* box_;
  const ::e8::ProceduralSphereProto* sphere_;
} _ProceduralShapeProto_default_instance_;
}  // namespace e8
static void InitDefaultsscc_info_ProceduralBoxProto_procedural_5fshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_ProceduralBoxProto_default_instance_;
    new (ptr) ::e8::ProceduralBoxProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::ProceduralBoxProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralBoxProto_procedural_5fshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProceduralBoxProto_procedural_5fshape_2eproto}, {}};

static void InitDefaultsscc_info_ProceduralPlaneProto_procedural_5fshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_ProceduralPlaneProto_default_instance_;
    new (ptr) ::e8::ProceduralPlaneProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::ProceduralPlaneProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralPlaneProto_procedural_5fshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProceduralPlaneProto_procedural_5fshape_2eproto}, {}};

static void InitDefaultsscc_info_ProceduralShapeProto_procedural_5fshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_ProceduralShapeProto_default_instance_;
    new (ptr) ::e8::ProceduralShapeProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::ProceduralShapeProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProceduralShapeProto_procedural_5fshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProceduralShapeProto_procedural_5fshape_2eproto}, {
      &scc_info_SrtTransform_primitive_2eproto.base,
      &scc_info_ProceduralPlaneProto_procedural_5fshape_2eproto.base,
      &scc_info_ProceduralBoxProto_procedural_5fshape_2eproto.base,
      &scc_info_ProceduralSphereProto_procedural_5fshape_2eproto.base,}};

static void InitDefaultsscc_info_ProceduralSphereProto_procedural_5fshape_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_ProceduralSphereProto_default_instance_;
    new (ptr) ::e8::ProceduralSphereProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::ProceduralSphereProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceduralSphereProto_procedural_5fshape_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProceduralSphereProto_procedural_5fshape_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_procedural_5fshape_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_procedural_5fshape_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_procedural_5fshape_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_procedural_5fshape_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralPlaneProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralPlaneProto, width_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralPlaneProto, height_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralPlaneProto, cell_area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, width_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, height_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, depth_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, cell_area_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralBoxProto, face_outward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralSphereProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralSphereProto, radius_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralSphereProto, cell_area_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralSphereProto, face_outward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralShapeProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralShapeProto, srt_transform_),
  offsetof(::e8::ProceduralShapeProtoDefaultTypeInternal, plane_),
  offsetof(::e8::ProceduralShapeProtoDefaultTypeInternal, box_),
  offsetof(::e8::ProceduralShapeProtoDefaultTypeInternal, sphere_),
  PROTOBUF_FIELD_OFFSET(::e8::ProceduralShapeProto, shape_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::ProceduralPlaneProto)},
  { 8, -1, sizeof(::e8::ProceduralBoxProto)},
  { 18, -1, sizeof(::e8::ProceduralSphereProto)},
  { 26, -1, sizeof(::e8::ProceduralShapeProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_ProceduralPlaneProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_ProceduralBoxProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_ProceduralSphereProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_ProceduralShapeProto_default_instance_),
};

const char descriptor_table_protodef_procedural_5fshape_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026procedural_shape.proto\022\002e8\032\017primitive."
  "proto\"H\n\024ProceduralPlaneProto\022\r\n\005width\030\001"
  " \001(\002\022\016\n\006height\030\002 \001(\002\022\021\n\tcell_area\030\003 \001(\002\""
  "k\n\022ProceduralBoxProto\022\r\n\005width\030\001 \001(\002\022\016\n\006"
  "height\030\002 \001(\002\022\r\n\005depth\030\003 \001(\002\022\021\n\tcell_area"
  "\030\004 \001(\002\022\024\n\014face_outward\030\005 \001(\010\"P\n\025Procedur"
  "alSphereProto\022\016\n\006radius\030\001 \001(\002\022\021\n\tcell_ar"
  "ea\030\002 \001(\002\022\024\n\014face_outward\030\003 \001(\010\"\307\001\n\024Proce"
  "duralShapeProto\022\'\n\rsrt_transform\030\001 \001(\0132\020"
  ".e8.SrtTransform\022)\n\005plane\030\002 \001(\0132\030.e8.Pro"
  "ceduralPlaneProtoH\000\022%\n\003box\030\003 \001(\0132\026.e8.Pr"
  "oceduralBoxProtoH\000\022+\n\006sphere\030\004 \001(\0132\031.e8."
  "ProceduralSphereProtoH\000B\007\n\005shapeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_procedural_5fshape_2eproto_deps[1] = {
  &::descriptor_table_primitive_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_procedural_5fshape_2eproto_sccs[4] = {
  &scc_info_ProceduralBoxProto_procedural_5fshape_2eproto.base,
  &scc_info_ProceduralPlaneProto_procedural_5fshape_2eproto.base,
  &scc_info_ProceduralShapeProto_procedural_5fshape_2eproto.base,
  &scc_info_ProceduralSphereProto_procedural_5fshape_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_procedural_5fshape_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_procedural_5fshape_2eproto = {
  false, false, descriptor_table_protodef_procedural_5fshape_2eproto, "procedural_shape.proto", 520,
  &descriptor_table_procedural_5fshape_2eproto_once, descriptor_table_procedural_5fshape_2eproto_sccs, descriptor_table_procedural_5fshape_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_procedural_5fshape_2eproto::offsets,
  file_level_metadata_procedural_5fshape_2eproto, 4, file_level_enum_descriptors_procedural_5fshape_2eproto, file_level_service_descriptors_procedural_5fshape_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_procedural_5fshape_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_procedural_5fshape_2eproto)), true);
namespace e8 {

// ===================================================================

void ProceduralPlaneProto::InitAsDefaultInstance() {
}
class ProceduralPlaneProto::_Internal {
 public:
};

ProceduralPlaneProto::ProceduralPlaneProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.ProceduralPlaneProto)
}
ProceduralPlaneProto::ProceduralPlaneProto(const ProceduralPlaneProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_area_) -
    reinterpret_cast<char*>(&width_)) + sizeof(cell_area_));
  // @@protoc_insertion_point(copy_constructor:e8.ProceduralPlaneProto)
}

void ProceduralPlaneProto::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_area_) -
      reinterpret_cast<char*>(&width_)) + sizeof(cell_area_));
}

ProceduralPlaneProto::~ProceduralPlaneProto() {
  // @@protoc_insertion_point(destructor:e8.ProceduralPlaneProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProceduralPlaneProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProceduralPlaneProto::ArenaDtor(void* object) {
  ProceduralPlaneProto* _this = reinterpret_cast< ProceduralPlaneProto* >(object);
  (void)_this;
}
void ProceduralPlaneProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProceduralPlaneProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProceduralPlaneProto& ProceduralPlaneProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProceduralPlaneProto_procedural_5fshape_2eproto.base);
  return *internal_default_instance();
}


void ProceduralPlaneProto::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.ProceduralPlaneProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_area_) -
      reinterpret_cast<char*>(&width_)) + sizeof(cell_area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProceduralPlaneProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cell_area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          cell_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProceduralPlaneProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.ProceduralPlaneProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // float cell_area = 3;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cell_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.ProceduralPlaneProto)
  return target;
}

size_t ProceduralPlaneProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.ProceduralPlaneProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float cell_area = 3;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProceduralPlaneProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.ProceduralPlaneProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProceduralPlaneProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProceduralPlaneProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.ProceduralPlaneProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.ProceduralPlaneProto)
    MergeFrom(*source);
  }
}

void ProceduralPlaneProto::MergeFrom(const ProceduralPlaneProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.ProceduralPlaneProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.cell_area() <= 0 && from.cell_area() >= 0)) {
    _internal_set_cell_area(from._internal_cell_area());
  }
}

void ProceduralPlaneProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.ProceduralPlaneProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceduralPlaneProto::CopyFrom(const ProceduralPlaneProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.ProceduralPlaneProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceduralPlaneProto::IsInitialized() const {
  return true;
}

void ProceduralPlaneProto::InternalSwap(ProceduralPlaneProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProceduralPlaneProto, cell_area_)
      + sizeof(ProceduralPlaneProto::cell_area_)
      - PROTOBUF_FIELD_OFFSET(ProceduralPlaneProto, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProceduralPlaneProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProceduralBoxProto::InitAsDefaultInstance() {
}
class ProceduralBoxProto::_Internal {
 public:
};

ProceduralBoxProto::ProceduralBoxProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.ProceduralBoxProto)
}
ProceduralBoxProto::ProceduralBoxProto(const ProceduralBoxProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_outward_) -
    reinterpret_cast<char*>(&width_)) + sizeof(face_outward_));
  // @@protoc_insertion_point(copy_constructor:e8.ProceduralBoxProto)
}

void ProceduralBoxProto::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_outward_) -
      reinterpret_cast<char*>(&width_)) + sizeof(face_outward_));
}

ProceduralBoxProto::~ProceduralBoxProto() {
  // @@protoc_insertion_point(destructor:e8.ProceduralBoxProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProceduralBoxProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProceduralBoxProto::ArenaDtor(void* object) {
  ProceduralBoxProto* _this = reinterpret_cast< ProceduralBoxProto* >(object);
  (void)_this;
}
void ProceduralBoxProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProceduralBoxProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProceduralBoxProto& ProceduralBoxProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProceduralBoxProto_procedural_5fshape_2eproto.base);
  return *internal_default_instance();
}


void ProceduralBoxProto::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.ProceduralBoxProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_outward_) -
      reinterpret_cast<char*>(&width_)) + sizeof(face_outward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProceduralBoxProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cell_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cell_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool face_outward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          face_outward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProceduralBoxProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.ProceduralBoxProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_width(), target);
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height(), target);
  }

  // float depth = 3;
  if (!(this->depth() <= 0 && this->depth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_depth(), target);
  }

  // float cell_area = 4;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cell_area(), target);
  }

  // bool face_outward = 5;
  if (this->face_outward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_face_outward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.ProceduralBoxProto)
  return target;
}

size_t ProceduralBoxProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.ProceduralBoxProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float depth = 3;
  if (!(this->depth() <= 0 && this->depth() >= 0)) {
    total_size += 1 + 4;
  }

  // float cell_area = 4;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    total_size += 1 + 4;
  }

  // bool face_outward = 5;
  if (this->face_outward() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProceduralBoxProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.ProceduralBoxProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProceduralBoxProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProceduralBoxProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.ProceduralBoxProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.ProceduralBoxProto)
    MergeFrom(*source);
  }
}

void ProceduralBoxProto::MergeFrom(const ProceduralBoxProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.ProceduralBoxProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.depth() <= 0 && from.depth() >= 0)) {
    _internal_set_depth(from._internal_depth());
  }
  if (!(from.cell_area() <= 0 && from.cell_area() >= 0)) {
    _internal_set_cell_area(from._internal_cell_area());
  }
  if (from.face_outward() != 0) {
    _internal_set_face_outward(from._internal_face_outward());
  }
}

void ProceduralBoxProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.ProceduralBoxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceduralBoxProto::CopyFrom(const ProceduralBoxProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.ProceduralBoxProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceduralBoxProto::IsInitialized() const {
  return true;
}

void ProceduralBoxProto::InternalSwap(ProceduralBoxProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProceduralBoxProto, face_outward_)
      + sizeof(ProceduralBoxProto::face_outward_)
      - PROTOBUF_FIELD_OFFSET(ProceduralBoxProto, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProceduralBoxProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProceduralSphereProto::InitAsDefaultInstance() {
}
class ProceduralSphereProto::_Internal {
 public:
};

ProceduralSphereProto::ProceduralSphereProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.ProceduralSphereProto)
}
ProceduralSphereProto::ProceduralSphereProto(const ProceduralSphereProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_outward_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(face_outward_));
  // @@protoc_insertion_point(copy_constructor:e8.ProceduralSphereProto)
}

void ProceduralSphereProto::SharedCtor() {
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_outward_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(face_outward_));
}

ProceduralSphereProto::~ProceduralSphereProto() {
  // @@protoc_insertion_point(destructor:e8.ProceduralSphereProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProceduralSphereProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProceduralSphereProto::ArenaDtor(void* object) {
  ProceduralSphereProto* _this = reinterpret_cast< ProceduralSphereProto* >(object);
  (void)_this;
}
void ProceduralSphereProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProceduralSphereProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProceduralSphereProto& ProceduralSphereProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProceduralSphereProto_procedural_5fshape_2eproto.base);
  return *internal_default_instance();
}


void ProceduralSphereProto::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.ProceduralSphereProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_outward_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(face_outward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProceduralSphereProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cell_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          cell_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool face_outward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          face_outward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProceduralSphereProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.ProceduralSphereProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_radius(), target);
  }

  // float cell_area = 2;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cell_area(), target);
  }

  // bool face_outward = 3;
  if (this->face_outward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_face_outward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.ProceduralSphereProto)
  return target;
}

size_t ProceduralSphereProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.ProceduralSphereProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float cell_area = 2;
  if (!(this->cell_area() <= 0 && this->cell_area() >= 0)) {
    total_size += 1 + 4;
  }

  // bool face_outward = 3;
  if (this->face_outward() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProceduralSphereProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.ProceduralSphereProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProceduralSphereProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProceduralSphereProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.ProceduralSphereProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.ProceduralSphereProto)
    MergeFrom(*source);
  }
}

void ProceduralSphereProto::MergeFrom(const ProceduralSphereProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.ProceduralSphereProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (!(from.cell_area() <= 0 && from.cell_area() >= 0)) {
    _internal_set_cell_area(from._internal_cell_area());
  }
  if (from.face_outward() != 0) {
    _internal_set_face_outward(from._internal_face_outward());
  }
}

void ProceduralSphereProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.ProceduralSphereProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceduralSphereProto::CopyFrom(const ProceduralSphereProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.ProceduralSphereProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceduralSphereProto::IsInitialized() const {
  return true;
}

void ProceduralSphereProto::InternalSwap(ProceduralSphereProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProceduralSphereProto, face_outward_)
      + sizeof(ProceduralSphereProto::face_outward_)
      - PROTOBUF_FIELD_OFFSET(ProceduralSphereProto, radius_)>(
          reinterpret_cast<char*>(&radius_),
          reinterpret_cast<char*>(&other->radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProceduralSphereProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProceduralShapeProto::InitAsDefaultInstance() {
  ::e8::_ProceduralShapeProto_default_instance_._instance.get_mutable()->srt_transform_ = const_cast< ::e8::SrtTransform*>(
      ::e8::SrtTransform::internal_default_instance());
  ::e8::_ProceduralShapeProto_default_instance_.plane_ = const_cast< ::e8::ProceduralPlaneProto*>(
      ::e8::ProceduralPlaneProto::internal_default_instance());
  ::e8::_ProceduralShapeProto_default_instance_.box_ = const_cast< ::e8::ProceduralBoxProto*>(
      ::e8::ProceduralBoxProto::internal_default_instance());
  ::e8::_ProceduralShapeProto_default_instance_.sphere_ = const_cast< ::e8::ProceduralSphereProto*>(
      ::e8::ProceduralSphereProto::internal_default_instance());
}
class ProceduralShapeProto::_Internal {
 public:
  static const ::e8::SrtTransform& srt_transform(const ProceduralShapeProto* msg);
  static const ::e8::ProceduralPlaneProto& plane(const ProceduralShapeProto* msg);
  static const ::e8::ProceduralBoxProto& box(const ProceduralShapeProto* msg);
  static const ::e8::ProceduralSphereProto& sphere(const ProceduralShapeProto* msg);
};

const ::e8::SrtTransform&
ProceduralShapeProto::_Internal::srt_transform(const ProceduralShapeProto* msg) {
  return *msg->srt_transform_;
}
const ::e8::ProceduralPlaneProto&
ProceduralShapeProto::_Internal::plane(const ProceduralShapeProto* msg) {
  return *msg->shape_.plane_;
}
const ::e8::ProceduralBoxProto&
ProceduralShapeProto::_Internal::box(const ProceduralShapeProto* msg) {
  return *msg->shape_.box_;
}
const ::e8::ProceduralSphereProto&
ProceduralShapeProto::_Internal::sphere(const ProceduralShapeProto* msg) {
  return *msg->shape_.sphere_;
}
void ProceduralShapeProto::clear_srt_transform() {
  if (GetArena() == nullptr && srt_transform_ != nullptr) {
    delete srt_transform_;
  }
  srt_transform_ = nullptr;
}
void ProceduralShapeProto::set_allocated_plane(::e8::ProceduralPlaneProto* plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plane);
    if (message_arena != submessage_arena) {
      plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    set_has_plane();
    shape_.plane_ = plane;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.ProceduralShapeProto.plane)
}
void ProceduralShapeProto::set_allocated_box(::e8::ProceduralBoxProto* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    shape_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.ProceduralShapeProto.box)
}
void ProceduralShapeProto::set_allocated_sphere(::e8::ProceduralSphereProto* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sphere);
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    shape_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.ProceduralShapeProto.sphere)
}
ProceduralShapeProto::ProceduralShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.ProceduralShapeProto)
}
ProceduralShapeProto::ProceduralShapeProto(const ProceduralShapeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_srt_transform()) {
    srt_transform_ = new ::e8::SrtTransform(*from.srt_transform_);
  } else {
    srt_transform_ = nullptr;
  }
  clear_has_shape();
  switch (from.shape_case()) {
    case kPlane: {
      _internal_mutable_plane()->::e8::ProceduralPlaneProto::MergeFrom(from._internal_plane());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::e8::ProceduralBoxProto::MergeFrom(from._internal_box());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::e8::ProceduralSphereProto::MergeFrom(from._internal_sphere());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:e8.ProceduralShapeProto)
}

void ProceduralShapeProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProceduralShapeProto_procedural_5fshape_2eproto.base);
  srt_transform_ = nullptr;
  clear_has_shape();
}

ProceduralShapeProto::~ProceduralShapeProto() {
  // @@protoc_insertion_point(destructor:e8.ProceduralShapeProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProceduralShapeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete srt_transform_;
  if (has_shape()) {
    clear_shape();
  }
}

void ProceduralShapeProto::ArenaDtor(void* object) {
  ProceduralShapeProto* _this = reinterpret_cast< ProceduralShapeProto* >(object);
  (void)_this;
}
void ProceduralShapeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProceduralShapeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProceduralShapeProto& ProceduralShapeProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProceduralShapeProto_procedural_5fshape_2eproto.base);
  return *internal_default_instance();
}


void ProceduralShapeProto::clear_shape() {
// @@protoc_insertion_point(one_of_clear_start:e8.ProceduralShapeProto)
  switch (shape_case()) {
    case kPlane: {
      if (GetArena() == nullptr) {
        delete shape_.plane_;
      }
      break;
    }
    case kBox: {
      if (GetArena() == nullptr) {
        delete shape_.box_;
      }
      break;
    }
    case kSphere: {
      if (GetArena() == nullptr) {
        delete shape_.sphere_;
      }
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHAPE_NOT_SET;
}


void ProceduralShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.ProceduralShapeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && srt_transform_ != nullptr) {
    delete srt_transform_;
  }
  srt_transform_ = nullptr;
  clear_shape();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProceduralShapeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .e8.SrtTransform srt_transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_srt_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.ProceduralPlaneProto plane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.ProceduralBoxProto box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.ProceduralSphereProto sphere = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProceduralShapeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.ProceduralShapeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e8.SrtTransform srt_transform = 1;
  if (this->has_srt_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::srt_transform(this), target, stream);
  }

  // .e8.ProceduralPlaneProto plane = 2;
  if (_internal_has_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plane(this), target, stream);
  }

  // .e8.ProceduralBoxProto box = 3;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::box(this), target, stream);
  }

  // .e8.ProceduralSphereProto sphere = 4;
  if (_internal_has_sphere()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sphere(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.ProceduralShapeProto)
  return target;
}

size_t ProceduralShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.ProceduralShapeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .e8.SrtTransform srt_transform = 1;
  if (this->has_srt_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *srt_transform_);
  }

  switch (shape_case()) {
    // .e8.ProceduralPlaneProto plane = 2;
    case kPlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.plane_);
      break;
    }
    // .e8.ProceduralBoxProto box = 3;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.box_);
      break;
    }
    // .e8.ProceduralSphereProto sphere = 4;
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.sphere_);
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProceduralShapeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.ProceduralShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProceduralShapeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProceduralShapeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.ProceduralShapeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.ProceduralShapeProto)
    MergeFrom(*source);
  }
}

void ProceduralShapeProto::MergeFrom(const ProceduralShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.ProceduralShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_srt_transform()) {
    _internal_mutable_srt_transform()->::e8::SrtTransform::MergeFrom(from._internal_srt_transform());
  }
  switch (from.shape_case()) {
    case kPlane: {
      _internal_mutable_plane()->::e8::ProceduralPlaneProto::MergeFrom(from._internal_plane());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::e8::ProceduralBoxProto::MergeFrom(from._internal_box());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::e8::ProceduralSphereProto::MergeFrom(from._internal_sphere());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
}

void ProceduralShapeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.ProceduralShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProceduralShapeProto::CopyFrom(const ProceduralShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.ProceduralShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProceduralShapeProto::IsInitialized() const {
  return true;
}

void ProceduralShapeProto::InternalSwap(ProceduralShapeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(srt_transform_, other->srt_transform_);
  swap(shape_, other->shape_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProceduralShapeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::e8::ProceduralPlaneProto* Arena::CreateMaybeMessage< ::e8::ProceduralPlaneProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::ProceduralPlaneProto >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::ProceduralBoxProto* Arena::CreateMaybeMessage< ::e8::ProceduralBoxProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::ProceduralBoxProto >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::ProceduralSphereProto* Arena::CreateMaybeMessage< ::e8::ProceduralSphereProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::ProceduralSphereProto >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::ProceduralShapeProto* Arena::CreateMaybeMessage< ::e8::ProceduralShapeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::ProceduralShapeProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

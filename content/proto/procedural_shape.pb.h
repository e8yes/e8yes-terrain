// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: procedural_shape.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_procedural_5fshape_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_procedural_5fshape_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_procedural_5fshape_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_procedural_5fshape_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_procedural_5fshape_2eproto;
namespace e8 {
class ProceduralBoxProto;
class ProceduralBoxProtoDefaultTypeInternal;
extern ProceduralBoxProtoDefaultTypeInternal _ProceduralBoxProto_default_instance_;
class ProceduralPlaneProto;
class ProceduralPlaneProtoDefaultTypeInternal;
extern ProceduralPlaneProtoDefaultTypeInternal _ProceduralPlaneProto_default_instance_;
class ProceduralShapeProto;
class ProceduralShapeProtoDefaultTypeInternal;
extern ProceduralShapeProtoDefaultTypeInternal _ProceduralShapeProto_default_instance_;
class ProceduralSphereProto;
class ProceduralSphereProtoDefaultTypeInternal;
extern ProceduralSphereProtoDefaultTypeInternal _ProceduralSphereProto_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::ProceduralBoxProto* Arena::CreateMaybeMessage<::e8::ProceduralBoxProto>(Arena*);
template<> ::e8::ProceduralPlaneProto* Arena::CreateMaybeMessage<::e8::ProceduralPlaneProto>(Arena*);
template<> ::e8::ProceduralShapeProto* Arena::CreateMaybeMessage<::e8::ProceduralShapeProto>(Arena*);
template<> ::e8::ProceduralSphereProto* Arena::CreateMaybeMessage<::e8::ProceduralSphereProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

// ===================================================================

class ProceduralPlaneProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.ProceduralPlaneProto) */ {
 public:
  inline ProceduralPlaneProto() : ProceduralPlaneProto(nullptr) {};
  virtual ~ProceduralPlaneProto();

  ProceduralPlaneProto(const ProceduralPlaneProto& from);
  ProceduralPlaneProto(ProceduralPlaneProto&& from) noexcept
    : ProceduralPlaneProto() {
    *this = ::std::move(from);
  }

  inline ProceduralPlaneProto& operator=(const ProceduralPlaneProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProceduralPlaneProto& operator=(ProceduralPlaneProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProceduralPlaneProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProceduralPlaneProto* internal_default_instance() {
    return reinterpret_cast<const ProceduralPlaneProto*>(
               &_ProceduralPlaneProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProceduralPlaneProto& a, ProceduralPlaneProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProceduralPlaneProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProceduralPlaneProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProceduralPlaneProto* New() const final {
    return CreateMaybeMessage<ProceduralPlaneProto>(nullptr);
  }

  ProceduralPlaneProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProceduralPlaneProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProceduralPlaneProto& from);
  void MergeFrom(const ProceduralPlaneProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProceduralPlaneProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.ProceduralPlaneProto";
  }
  protected:
  explicit ProceduralPlaneProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_procedural_5fshape_2eproto);
    return ::descriptor_table_procedural_5fshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kCellAreaFieldNumber = 3,
  };
  // float width = 1;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 2;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float cell_area = 3;
  void clear_cell_area();
  float cell_area() const;
  void set_cell_area(float value);
  private:
  float _internal_cell_area() const;
  void _internal_set_cell_area(float value);
  public:

  // @@protoc_insertion_point(class_scope:e8.ProceduralPlaneProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float width_;
  float height_;
  float cell_area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_procedural_5fshape_2eproto;
};
// -------------------------------------------------------------------

class ProceduralBoxProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.ProceduralBoxProto) */ {
 public:
  inline ProceduralBoxProto() : ProceduralBoxProto(nullptr) {};
  virtual ~ProceduralBoxProto();

  ProceduralBoxProto(const ProceduralBoxProto& from);
  ProceduralBoxProto(ProceduralBoxProto&& from) noexcept
    : ProceduralBoxProto() {
    *this = ::std::move(from);
  }

  inline ProceduralBoxProto& operator=(const ProceduralBoxProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProceduralBoxProto& operator=(ProceduralBoxProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProceduralBoxProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProceduralBoxProto* internal_default_instance() {
    return reinterpret_cast<const ProceduralBoxProto*>(
               &_ProceduralBoxProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProceduralBoxProto& a, ProceduralBoxProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProceduralBoxProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProceduralBoxProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProceduralBoxProto* New() const final {
    return CreateMaybeMessage<ProceduralBoxProto>(nullptr);
  }

  ProceduralBoxProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProceduralBoxProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProceduralBoxProto& from);
  void MergeFrom(const ProceduralBoxProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProceduralBoxProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.ProceduralBoxProto";
  }
  protected:
  explicit ProceduralBoxProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_procedural_5fshape_2eproto);
    return ::descriptor_table_procedural_5fshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDepthFieldNumber = 3,
    kCellAreaFieldNumber = 4,
    kFaceOutwardFieldNumber = 5,
  };
  // float width = 1;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 2;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float depth = 3;
  void clear_depth();
  float depth() const;
  void set_depth(float value);
  private:
  float _internal_depth() const;
  void _internal_set_depth(float value);
  public:

  // float cell_area = 4;
  void clear_cell_area();
  float cell_area() const;
  void set_cell_area(float value);
  private:
  float _internal_cell_area() const;
  void _internal_set_cell_area(float value);
  public:

  // bool face_outward = 5;
  void clear_face_outward();
  bool face_outward() const;
  void set_face_outward(bool value);
  private:
  bool _internal_face_outward() const;
  void _internal_set_face_outward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:e8.ProceduralBoxProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float width_;
  float height_;
  float depth_;
  float cell_area_;
  bool face_outward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_procedural_5fshape_2eproto;
};
// -------------------------------------------------------------------

class ProceduralSphereProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.ProceduralSphereProto) */ {
 public:
  inline ProceduralSphereProto() : ProceduralSphereProto(nullptr) {};
  virtual ~ProceduralSphereProto();

  ProceduralSphereProto(const ProceduralSphereProto& from);
  ProceduralSphereProto(ProceduralSphereProto&& from) noexcept
    : ProceduralSphereProto() {
    *this = ::std::move(from);
  }

  inline ProceduralSphereProto& operator=(const ProceduralSphereProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProceduralSphereProto& operator=(ProceduralSphereProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProceduralSphereProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProceduralSphereProto* internal_default_instance() {
    return reinterpret_cast<const ProceduralSphereProto*>(
               &_ProceduralSphereProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProceduralSphereProto& a, ProceduralSphereProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProceduralSphereProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProceduralSphereProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProceduralSphereProto* New() const final {
    return CreateMaybeMessage<ProceduralSphereProto>(nullptr);
  }

  ProceduralSphereProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProceduralSphereProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProceduralSphereProto& from);
  void MergeFrom(const ProceduralSphereProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProceduralSphereProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.ProceduralSphereProto";
  }
  protected:
  explicit ProceduralSphereProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_procedural_5fshape_2eproto);
    return ::descriptor_table_procedural_5fshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
    kCellAreaFieldNumber = 2,
    kFaceOutwardFieldNumber = 3,
  };
  // float radius = 1;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float cell_area = 2;
  void clear_cell_area();
  float cell_area() const;
  void set_cell_area(float value);
  private:
  float _internal_cell_area() const;
  void _internal_set_cell_area(float value);
  public:

  // bool face_outward = 3;
  void clear_face_outward();
  bool face_outward() const;
  void set_face_outward(bool value);
  private:
  bool _internal_face_outward() const;
  void _internal_set_face_outward(bool value);
  public:

  // @@protoc_insertion_point(class_scope:e8.ProceduralSphereProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float radius_;
  float cell_area_;
  bool face_outward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_procedural_5fshape_2eproto;
};
// -------------------------------------------------------------------

class ProceduralShapeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.ProceduralShapeProto) */ {
 public:
  inline ProceduralShapeProto() : ProceduralShapeProto(nullptr) {};
  virtual ~ProceduralShapeProto();

  ProceduralShapeProto(const ProceduralShapeProto& from);
  ProceduralShapeProto(ProceduralShapeProto&& from) noexcept
    : ProceduralShapeProto() {
    *this = ::std::move(from);
  }

  inline ProceduralShapeProto& operator=(const ProceduralShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProceduralShapeProto& operator=(ProceduralShapeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProceduralShapeProto& default_instance();

  enum ShapeCase {
    kPlane = 2,
    kBox = 3,
    kSphere = 4,
    SHAPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProceduralShapeProto* internal_default_instance() {
    return reinterpret_cast<const ProceduralShapeProto*>(
               &_ProceduralShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProceduralShapeProto& a, ProceduralShapeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProceduralShapeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProceduralShapeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProceduralShapeProto* New() const final {
    return CreateMaybeMessage<ProceduralShapeProto>(nullptr);
  }

  ProceduralShapeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProceduralShapeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProceduralShapeProto& from);
  void MergeFrom(const ProceduralShapeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProceduralShapeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.ProceduralShapeProto";
  }
  protected:
  explicit ProceduralShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_procedural_5fshape_2eproto);
    return ::descriptor_table_procedural_5fshape_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrtTransformFieldNumber = 1,
    kPlaneFieldNumber = 2,
    kBoxFieldNumber = 3,
    kSphereFieldNumber = 4,
  };
  // .e8.SrtTransform srt_transform = 1;
  bool has_srt_transform() const;
  private:
  bool _internal_has_srt_transform() const;
  public:
  void clear_srt_transform();
  const ::e8::SrtTransform& srt_transform() const;
  ::e8::SrtTransform* release_srt_transform();
  ::e8::SrtTransform* mutable_srt_transform();
  void set_allocated_srt_transform(::e8::SrtTransform* srt_transform);
  private:
  const ::e8::SrtTransform& _internal_srt_transform() const;
  ::e8::SrtTransform* _internal_mutable_srt_transform();
  public:
  void unsafe_arena_set_allocated_srt_transform(
      ::e8::SrtTransform* srt_transform);
  ::e8::SrtTransform* unsafe_arena_release_srt_transform();

  // .e8.ProceduralPlaneProto plane = 2;
  bool has_plane() const;
  private:
  bool _internal_has_plane() const;
  public:
  void clear_plane();
  const ::e8::ProceduralPlaneProto& plane() const;
  ::e8::ProceduralPlaneProto* release_plane();
  ::e8::ProceduralPlaneProto* mutable_plane();
  void set_allocated_plane(::e8::ProceduralPlaneProto* plane);
  private:
  const ::e8::ProceduralPlaneProto& _internal_plane() const;
  ::e8::ProceduralPlaneProto* _internal_mutable_plane();
  public:
  void unsafe_arena_set_allocated_plane(
      ::e8::ProceduralPlaneProto* plane);
  ::e8::ProceduralPlaneProto* unsafe_arena_release_plane();

  // .e8.ProceduralBoxProto box = 3;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::e8::ProceduralBoxProto& box() const;
  ::e8::ProceduralBoxProto* release_box();
  ::e8::ProceduralBoxProto* mutable_box();
  void set_allocated_box(::e8::ProceduralBoxProto* box);
  private:
  const ::e8::ProceduralBoxProto& _internal_box() const;
  ::e8::ProceduralBoxProto* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::e8::ProceduralBoxProto* box);
  ::e8::ProceduralBoxProto* unsafe_arena_release_box();

  // .e8.ProceduralSphereProto sphere = 4;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::e8::ProceduralSphereProto& sphere() const;
  ::e8::ProceduralSphereProto* release_sphere();
  ::e8::ProceduralSphereProto* mutable_sphere();
  void set_allocated_sphere(::e8::ProceduralSphereProto* sphere);
  private:
  const ::e8::ProceduralSphereProto& _internal_sphere() const;
  ::e8::ProceduralSphereProto* _internal_mutable_sphere();
  public:
  void unsafe_arena_set_allocated_sphere(
      ::e8::ProceduralSphereProto* sphere);
  ::e8::ProceduralSphereProto* unsafe_arena_release_sphere();

  void clear_shape();
  ShapeCase shape_case() const;
  // @@protoc_insertion_point(class_scope:e8.ProceduralShapeProto)
 private:
  class _Internal;
  void set_has_plane();
  void set_has_box();
  void set_has_sphere();

  inline bool has_shape() const;
  inline void clear_has_shape();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::e8::SrtTransform* srt_transform_;
  union ShapeUnion {
    ShapeUnion() {}
    ::e8::ProceduralPlaneProto* plane_;
    ::e8::ProceduralBoxProto* box_;
    ::e8::ProceduralSphereProto* sphere_;
  } shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_procedural_5fshape_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProceduralPlaneProto

// float width = 1;
inline void ProceduralPlaneProto::clear_width() {
  width_ = 0;
}
inline float ProceduralPlaneProto::_internal_width() const {
  return width_;
}
inline float ProceduralPlaneProto::width() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralPlaneProto.width)
  return _internal_width();
}
inline void ProceduralPlaneProto::_internal_set_width(float value) {
  
  width_ = value;
}
inline void ProceduralPlaneProto::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralPlaneProto.width)
}

// float height = 2;
inline void ProceduralPlaneProto::clear_height() {
  height_ = 0;
}
inline float ProceduralPlaneProto::_internal_height() const {
  return height_;
}
inline float ProceduralPlaneProto::height() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralPlaneProto.height)
  return _internal_height();
}
inline void ProceduralPlaneProto::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ProceduralPlaneProto::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralPlaneProto.height)
}

// float cell_area = 3;
inline void ProceduralPlaneProto::clear_cell_area() {
  cell_area_ = 0;
}
inline float ProceduralPlaneProto::_internal_cell_area() const {
  return cell_area_;
}
inline float ProceduralPlaneProto::cell_area() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralPlaneProto.cell_area)
  return _internal_cell_area();
}
inline void ProceduralPlaneProto::_internal_set_cell_area(float value) {
  
  cell_area_ = value;
}
inline void ProceduralPlaneProto::set_cell_area(float value) {
  _internal_set_cell_area(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralPlaneProto.cell_area)
}

// -------------------------------------------------------------------

// ProceduralBoxProto

// float width = 1;
inline void ProceduralBoxProto::clear_width() {
  width_ = 0;
}
inline float ProceduralBoxProto::_internal_width() const {
  return width_;
}
inline float ProceduralBoxProto::width() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralBoxProto.width)
  return _internal_width();
}
inline void ProceduralBoxProto::_internal_set_width(float value) {
  
  width_ = value;
}
inline void ProceduralBoxProto::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralBoxProto.width)
}

// float height = 2;
inline void ProceduralBoxProto::clear_height() {
  height_ = 0;
}
inline float ProceduralBoxProto::_internal_height() const {
  return height_;
}
inline float ProceduralBoxProto::height() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralBoxProto.height)
  return _internal_height();
}
inline void ProceduralBoxProto::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ProceduralBoxProto::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralBoxProto.height)
}

// float depth = 3;
inline void ProceduralBoxProto::clear_depth() {
  depth_ = 0;
}
inline float ProceduralBoxProto::_internal_depth() const {
  return depth_;
}
inline float ProceduralBoxProto::depth() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralBoxProto.depth)
  return _internal_depth();
}
inline void ProceduralBoxProto::_internal_set_depth(float value) {
  
  depth_ = value;
}
inline void ProceduralBoxProto::set_depth(float value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralBoxProto.depth)
}

// float cell_area = 4;
inline void ProceduralBoxProto::clear_cell_area() {
  cell_area_ = 0;
}
inline float ProceduralBoxProto::_internal_cell_area() const {
  return cell_area_;
}
inline float ProceduralBoxProto::cell_area() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralBoxProto.cell_area)
  return _internal_cell_area();
}
inline void ProceduralBoxProto::_internal_set_cell_area(float value) {
  
  cell_area_ = value;
}
inline void ProceduralBoxProto::set_cell_area(float value) {
  _internal_set_cell_area(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralBoxProto.cell_area)
}

// bool face_outward = 5;
inline void ProceduralBoxProto::clear_face_outward() {
  face_outward_ = false;
}
inline bool ProceduralBoxProto::_internal_face_outward() const {
  return face_outward_;
}
inline bool ProceduralBoxProto::face_outward() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralBoxProto.face_outward)
  return _internal_face_outward();
}
inline void ProceduralBoxProto::_internal_set_face_outward(bool value) {
  
  face_outward_ = value;
}
inline void ProceduralBoxProto::set_face_outward(bool value) {
  _internal_set_face_outward(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralBoxProto.face_outward)
}

// -------------------------------------------------------------------

// ProceduralSphereProto

// float radius = 1;
inline void ProceduralSphereProto::clear_radius() {
  radius_ = 0;
}
inline float ProceduralSphereProto::_internal_radius() const {
  return radius_;
}
inline float ProceduralSphereProto::radius() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralSphereProto.radius)
  return _internal_radius();
}
inline void ProceduralSphereProto::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void ProceduralSphereProto::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralSphereProto.radius)
}

// float cell_area = 2;
inline void ProceduralSphereProto::clear_cell_area() {
  cell_area_ = 0;
}
inline float ProceduralSphereProto::_internal_cell_area() const {
  return cell_area_;
}
inline float ProceduralSphereProto::cell_area() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralSphereProto.cell_area)
  return _internal_cell_area();
}
inline void ProceduralSphereProto::_internal_set_cell_area(float value) {
  
  cell_area_ = value;
}
inline void ProceduralSphereProto::set_cell_area(float value) {
  _internal_set_cell_area(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralSphereProto.cell_area)
}

// bool face_outward = 3;
inline void ProceduralSphereProto::clear_face_outward() {
  face_outward_ = false;
}
inline bool ProceduralSphereProto::_internal_face_outward() const {
  return face_outward_;
}
inline bool ProceduralSphereProto::face_outward() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralSphereProto.face_outward)
  return _internal_face_outward();
}
inline void ProceduralSphereProto::_internal_set_face_outward(bool value) {
  
  face_outward_ = value;
}
inline void ProceduralSphereProto::set_face_outward(bool value) {
  _internal_set_face_outward(value);
  // @@protoc_insertion_point(field_set:e8.ProceduralSphereProto.face_outward)
}

// -------------------------------------------------------------------

// ProceduralShapeProto

// .e8.SrtTransform srt_transform = 1;
inline bool ProceduralShapeProto::_internal_has_srt_transform() const {
  return this != internal_default_instance() && srt_transform_ != nullptr;
}
inline bool ProceduralShapeProto::has_srt_transform() const {
  return _internal_has_srt_transform();
}
inline const ::e8::SrtTransform& ProceduralShapeProto::_internal_srt_transform() const {
  const ::e8::SrtTransform* p = srt_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::SrtTransform*>(
      &::e8::_SrtTransform_default_instance_);
}
inline const ::e8::SrtTransform& ProceduralShapeProto::srt_transform() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralShapeProto.srt_transform)
  return _internal_srt_transform();
}
inline void ProceduralShapeProto::unsafe_arena_set_allocated_srt_transform(
    ::e8::SrtTransform* srt_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srt_transform_);
  }
  srt_transform_ = srt_transform;
  if (srt_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.ProceduralShapeProto.srt_transform)
}
inline ::e8::SrtTransform* ProceduralShapeProto::release_srt_transform() {
  auto temp = unsafe_arena_release_srt_transform();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::SrtTransform* ProceduralShapeProto::unsafe_arena_release_srt_transform() {
  // @@protoc_insertion_point(field_release:e8.ProceduralShapeProto.srt_transform)
  
  ::e8::SrtTransform* temp = srt_transform_;
  srt_transform_ = nullptr;
  return temp;
}
inline ::e8::SrtTransform* ProceduralShapeProto::_internal_mutable_srt_transform() {
  
  if (srt_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::SrtTransform>(GetArena());
    srt_transform_ = p;
  }
  return srt_transform_;
}
inline ::e8::SrtTransform* ProceduralShapeProto::mutable_srt_transform() {
  // @@protoc_insertion_point(field_mutable:e8.ProceduralShapeProto.srt_transform)
  return _internal_mutable_srt_transform();
}
inline void ProceduralShapeProto::set_allocated_srt_transform(::e8::SrtTransform* srt_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(srt_transform_);
  }
  if (srt_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(srt_transform)->GetArena();
    if (message_arena != submessage_arena) {
      srt_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srt_transform, submessage_arena);
    }
    
  } else {
    
  }
  srt_transform_ = srt_transform;
  // @@protoc_insertion_point(field_set_allocated:e8.ProceduralShapeProto.srt_transform)
}

// .e8.ProceduralPlaneProto plane = 2;
inline bool ProceduralShapeProto::_internal_has_plane() const {
  return shape_case() == kPlane;
}
inline bool ProceduralShapeProto::has_plane() const {
  return _internal_has_plane();
}
inline void ProceduralShapeProto::set_has_plane() {
  _oneof_case_[0] = kPlane;
}
inline void ProceduralShapeProto::clear_plane() {
  if (_internal_has_plane()) {
    if (GetArena() == nullptr) {
      delete shape_.plane_;
    }
    clear_has_shape();
  }
}
inline ::e8::ProceduralPlaneProto* ProceduralShapeProto::release_plane() {
  // @@protoc_insertion_point(field_release:e8.ProceduralShapeProto.plane)
  if (_internal_has_plane()) {
    clear_has_shape();
      ::e8::ProceduralPlaneProto* temp = shape_.plane_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e8::ProceduralPlaneProto& ProceduralShapeProto::_internal_plane() const {
  return _internal_has_plane()
      ? *shape_.plane_
      : *reinterpret_cast< ::e8::ProceduralPlaneProto*>(&::e8::_ProceduralPlaneProto_default_instance_);
}
inline const ::e8::ProceduralPlaneProto& ProceduralShapeProto::plane() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralShapeProto.plane)
  return _internal_plane();
}
inline ::e8::ProceduralPlaneProto* ProceduralShapeProto::unsafe_arena_release_plane() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.ProceduralShapeProto.plane)
  if (_internal_has_plane()) {
    clear_has_shape();
    ::e8::ProceduralPlaneProto* temp = shape_.plane_;
    shape_.plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProceduralShapeProto::unsafe_arena_set_allocated_plane(::e8::ProceduralPlaneProto* plane) {
  clear_shape();
  if (plane) {
    set_has_plane();
    shape_.plane_ = plane;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.ProceduralShapeProto.plane)
}
inline ::e8::ProceduralPlaneProto* ProceduralShapeProto::_internal_mutable_plane() {
  if (!_internal_has_plane()) {
    clear_shape();
    set_has_plane();
    shape_.plane_ = CreateMaybeMessage< ::e8::ProceduralPlaneProto >(GetArena());
  }
  return shape_.plane_;
}
inline ::e8::ProceduralPlaneProto* ProceduralShapeProto::mutable_plane() {
  // @@protoc_insertion_point(field_mutable:e8.ProceduralShapeProto.plane)
  return _internal_mutable_plane();
}

// .e8.ProceduralBoxProto box = 3;
inline bool ProceduralShapeProto::_internal_has_box() const {
  return shape_case() == kBox;
}
inline bool ProceduralShapeProto::has_box() const {
  return _internal_has_box();
}
inline void ProceduralShapeProto::set_has_box() {
  _oneof_case_[0] = kBox;
}
inline void ProceduralShapeProto::clear_box() {
  if (_internal_has_box()) {
    if (GetArena() == nullptr) {
      delete shape_.box_;
    }
    clear_has_shape();
  }
}
inline ::e8::ProceduralBoxProto* ProceduralShapeProto::release_box() {
  // @@protoc_insertion_point(field_release:e8.ProceduralShapeProto.box)
  if (_internal_has_box()) {
    clear_has_shape();
      ::e8::ProceduralBoxProto* temp = shape_.box_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e8::ProceduralBoxProto& ProceduralShapeProto::_internal_box() const {
  return _internal_has_box()
      ? *shape_.box_
      : *reinterpret_cast< ::e8::ProceduralBoxProto*>(&::e8::_ProceduralBoxProto_default_instance_);
}
inline const ::e8::ProceduralBoxProto& ProceduralShapeProto::box() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralShapeProto.box)
  return _internal_box();
}
inline ::e8::ProceduralBoxProto* ProceduralShapeProto::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.ProceduralShapeProto.box)
  if (_internal_has_box()) {
    clear_has_shape();
    ::e8::ProceduralBoxProto* temp = shape_.box_;
    shape_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProceduralShapeProto::unsafe_arena_set_allocated_box(::e8::ProceduralBoxProto* box) {
  clear_shape();
  if (box) {
    set_has_box();
    shape_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.ProceduralShapeProto.box)
}
inline ::e8::ProceduralBoxProto* ProceduralShapeProto::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_shape();
    set_has_box();
    shape_.box_ = CreateMaybeMessage< ::e8::ProceduralBoxProto >(GetArena());
  }
  return shape_.box_;
}
inline ::e8::ProceduralBoxProto* ProceduralShapeProto::mutable_box() {
  // @@protoc_insertion_point(field_mutable:e8.ProceduralShapeProto.box)
  return _internal_mutable_box();
}

// .e8.ProceduralSphereProto sphere = 4;
inline bool ProceduralShapeProto::_internal_has_sphere() const {
  return shape_case() == kSphere;
}
inline bool ProceduralShapeProto::has_sphere() const {
  return _internal_has_sphere();
}
inline void ProceduralShapeProto::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
inline void ProceduralShapeProto::clear_sphere() {
  if (_internal_has_sphere()) {
    if (GetArena() == nullptr) {
      delete shape_.sphere_;
    }
    clear_has_shape();
  }
}
inline ::e8::ProceduralSphereProto* ProceduralShapeProto::release_sphere() {
  // @@protoc_insertion_point(field_release:e8.ProceduralShapeProto.sphere)
  if (_internal_has_sphere()) {
    clear_has_shape();
      ::e8::ProceduralSphereProto* temp = shape_.sphere_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e8::ProceduralSphereProto& ProceduralShapeProto::_internal_sphere() const {
  return _internal_has_sphere()
      ? *shape_.sphere_
      : *reinterpret_cast< ::e8::ProceduralSphereProto*>(&::e8::_ProceduralSphereProto_default_instance_);
}
inline const ::e8::ProceduralSphereProto& ProceduralShapeProto::sphere() const {
  // @@protoc_insertion_point(field_get:e8.ProceduralShapeProto.sphere)
  return _internal_sphere();
}
inline ::e8::ProceduralSphereProto* ProceduralShapeProto::unsafe_arena_release_sphere() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.ProceduralShapeProto.sphere)
  if (_internal_has_sphere()) {
    clear_has_shape();
    ::e8::ProceduralSphereProto* temp = shape_.sphere_;
    shape_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProceduralShapeProto::unsafe_arena_set_allocated_sphere(::e8::ProceduralSphereProto* sphere) {
  clear_shape();
  if (sphere) {
    set_has_sphere();
    shape_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.ProceduralShapeProto.sphere)
}
inline ::e8::ProceduralSphereProto* ProceduralShapeProto::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_shape();
    set_has_sphere();
    shape_.sphere_ = CreateMaybeMessage< ::e8::ProceduralSphereProto >(GetArena());
  }
  return shape_.sphere_;
}
inline ::e8::ProceduralSphereProto* ProceduralShapeProto::mutable_sphere() {
  // @@protoc_insertion_point(field_mutable:e8.ProceduralShapeProto.sphere)
  return _internal_mutable_sphere();
}

inline bool ProceduralShapeProto::has_shape() const {
  return shape_case() != SHAPE_NOT_SET;
}
inline void ProceduralShapeProto::clear_has_shape() {
  _oneof_case_[0] = SHAPE_NOT_SET;
}
inline ProceduralShapeProto::ShapeCase ProceduralShapeProto::shape_case() const {
  return ProceduralShapeProto::ShapeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_procedural_5fshape_2eproto

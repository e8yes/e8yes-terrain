// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_5fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fobject_2eproto;
namespace e8 {
class SceneObject;
class SceneObjectDefaultTypeInternal;
extern SceneObjectDefaultTypeInternal _SceneObject_default_instance_;
class SceneObject_SceneEntityChildren;
class SceneObject_SceneEntityChildrenDefaultTypeInternal;
extern SceneObject_SceneEntityChildrenDefaultTypeInternal _SceneObject_SceneEntityChildren_default_instance_;
class SceneObject_SceneObjectChildren;
class SceneObject_SceneObjectChildrenDefaultTypeInternal;
extern SceneObject_SceneObjectChildrenDefaultTypeInternal _SceneObject_SceneObjectChildren_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::SceneObject* Arena::CreateMaybeMessage<::e8::SceneObject>(Arena*);
template<> ::e8::SceneObject_SceneEntityChildren* Arena::CreateMaybeMessage<::e8::SceneObject_SceneEntityChildren>(Arena*);
template<> ::e8::SceneObject_SceneObjectChildren* Arena::CreateMaybeMessage<::e8::SceneObject_SceneObjectChildren>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

// ===================================================================

class SceneObject_SceneObjectChildren PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.SceneObject.SceneObjectChildren) */ {
 public:
  inline SceneObject_SceneObjectChildren() : SceneObject_SceneObjectChildren(nullptr) {};
  virtual ~SceneObject_SceneObjectChildren();

  SceneObject_SceneObjectChildren(const SceneObject_SceneObjectChildren& from);
  SceneObject_SceneObjectChildren(SceneObject_SceneObjectChildren&& from) noexcept
    : SceneObject_SceneObjectChildren() {
    *this = ::std::move(from);
  }

  inline SceneObject_SceneObjectChildren& operator=(const SceneObject_SceneObjectChildren& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneObject_SceneObjectChildren& operator=(SceneObject_SceneObjectChildren&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneObject_SceneObjectChildren& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneObject_SceneObjectChildren* internal_default_instance() {
    return reinterpret_cast<const SceneObject_SceneObjectChildren*>(
               &_SceneObject_SceneObjectChildren_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneObject_SceneObjectChildren& a, SceneObject_SceneObjectChildren& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneObject_SceneObjectChildren* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneObject_SceneObjectChildren* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneObject_SceneObjectChildren* New() const final {
    return CreateMaybeMessage<SceneObject_SceneObjectChildren>(nullptr);
  }

  SceneObject_SceneObjectChildren* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneObject_SceneObjectChildren>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneObject_SceneObjectChildren& from);
  void MergeFrom(const SceneObject_SceneObjectChildren& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneObject_SceneObjectChildren* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.SceneObject.SceneObjectChildren";
  }
  protected:
  explicit SceneObject_SceneObjectChildren(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fobject_2eproto);
    return ::descriptor_table_scene_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneObjectIdsFieldNumber = 1,
  };
  // repeated string scene_object_ids = 1;
  int scene_object_ids_size() const;
  private:
  int _internal_scene_object_ids_size() const;
  public:
  void clear_scene_object_ids();
  const std::string& scene_object_ids(int index) const;
  std::string* mutable_scene_object_ids(int index);
  void set_scene_object_ids(int index, const std::string& value);
  void set_scene_object_ids(int index, std::string&& value);
  void set_scene_object_ids(int index, const char* value);
  void set_scene_object_ids(int index, const char* value, size_t size);
  std::string* add_scene_object_ids();
  void add_scene_object_ids(const std::string& value);
  void add_scene_object_ids(std::string&& value);
  void add_scene_object_ids(const char* value);
  void add_scene_object_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scene_object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scene_object_ids();
  private:
  const std::string& _internal_scene_object_ids(int index) const;
  std::string* _internal_add_scene_object_ids();
  public:

  // @@protoc_insertion_point(class_scope:e8.SceneObject.SceneObjectChildren)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scene_object_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fobject_2eproto;
};
// -------------------------------------------------------------------

class SceneObject_SceneEntityChildren PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.SceneObject.SceneEntityChildren) */ {
 public:
  inline SceneObject_SceneEntityChildren() : SceneObject_SceneEntityChildren(nullptr) {};
  virtual ~SceneObject_SceneEntityChildren();

  SceneObject_SceneEntityChildren(const SceneObject_SceneEntityChildren& from);
  SceneObject_SceneEntityChildren(SceneObject_SceneEntityChildren&& from) noexcept
    : SceneObject_SceneEntityChildren() {
    *this = ::std::move(from);
  }

  inline SceneObject_SceneEntityChildren& operator=(const SceneObject_SceneEntityChildren& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneObject_SceneEntityChildren& operator=(SceneObject_SceneEntityChildren&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneObject_SceneEntityChildren& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneObject_SceneEntityChildren* internal_default_instance() {
    return reinterpret_cast<const SceneObject_SceneEntityChildren*>(
               &_SceneObject_SceneEntityChildren_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SceneObject_SceneEntityChildren& a, SceneObject_SceneEntityChildren& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneObject_SceneEntityChildren* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneObject_SceneEntityChildren* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneObject_SceneEntityChildren* New() const final {
    return CreateMaybeMessage<SceneObject_SceneEntityChildren>(nullptr);
  }

  SceneObject_SceneEntityChildren* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneObject_SceneEntityChildren>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneObject_SceneEntityChildren& from);
  void MergeFrom(const SceneObject_SceneEntityChildren& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneObject_SceneEntityChildren* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.SceneObject.SceneEntityChildren";
  }
  protected:
  explicit SceneObject_SceneEntityChildren(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fobject_2eproto);
    return ::descriptor_table_scene_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneEntityIdsFieldNumber = 1,
  };
  // repeated string scene_entity_ids = 1;
  int scene_entity_ids_size() const;
  private:
  int _internal_scene_entity_ids_size() const;
  public:
  void clear_scene_entity_ids();
  const std::string& scene_entity_ids(int index) const;
  std::string* mutable_scene_entity_ids(int index);
  void set_scene_entity_ids(int index, const std::string& value);
  void set_scene_entity_ids(int index, std::string&& value);
  void set_scene_entity_ids(int index, const char* value);
  void set_scene_entity_ids(int index, const char* value, size_t size);
  std::string* add_scene_entity_ids();
  void add_scene_entity_ids(const std::string& value);
  void add_scene_entity_ids(std::string&& value);
  void add_scene_entity_ids(const char* value);
  void add_scene_entity_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scene_entity_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scene_entity_ids();
  private:
  const std::string& _internal_scene_entity_ids(int index) const;
  std::string* _internal_add_scene_entity_ids();
  public:

  // @@protoc_insertion_point(class_scope:e8.SceneObject.SceneEntityChildren)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scene_entity_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fobject_2eproto;
};
// -------------------------------------------------------------------

class SceneObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.SceneObject) */ {
 public:
  inline SceneObject() : SceneObject(nullptr) {};
  virtual ~SceneObject();

  SceneObject(const SceneObject& from);
  SceneObject(SceneObject&& from) noexcept
    : SceneObject() {
    *this = ::std::move(from);
  }

  inline SceneObject& operator=(const SceneObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneObject& operator=(SceneObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneObject& default_instance();

  enum ChildrenCase {
    kSceneObjectChildren = 4,
    kSceneEntityChildren = 5,
    CHILDREN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneObject* internal_default_instance() {
    return reinterpret_cast<const SceneObject*>(
               &_SceneObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SceneObject& a, SceneObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneObject* New() const final {
    return CreateMaybeMessage<SceneObject>(nullptr);
  }

  SceneObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneObject& from);
  void MergeFrom(const SceneObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.SceneObject";
  }
  protected:
  explicit SceneObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fobject_2eproto);
    return ::descriptor_table_scene_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SceneObject_SceneObjectChildren SceneObjectChildren;
  typedef SceneObject_SceneEntityChildren SceneEntityChildren;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kProceduralObjectIdFieldNumber = 3,
    kSceneObjectChildrenFieldNumber = 4,
    kSceneEntityChildrenFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string procedural_object_id = 3;
  void clear_procedural_object_id();
  const std::string& procedural_object_id() const;
  void set_procedural_object_id(const std::string& value);
  void set_procedural_object_id(std::string&& value);
  void set_procedural_object_id(const char* value);
  void set_procedural_object_id(const char* value, size_t size);
  std::string* mutable_procedural_object_id();
  std::string* release_procedural_object_id();
  void set_allocated_procedural_object_id(std::string* procedural_object_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_procedural_object_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_procedural_object_id(
      std::string* procedural_object_id);
  private:
  const std::string& _internal_procedural_object_id() const;
  void _internal_set_procedural_object_id(const std::string& value);
  std::string* _internal_mutable_procedural_object_id();
  public:

  // .e8.SceneObject.SceneObjectChildren scene_object_children = 4;
  bool has_scene_object_children() const;
  private:
  bool _internal_has_scene_object_children() const;
  public:
  void clear_scene_object_children();
  const ::e8::SceneObject_SceneObjectChildren& scene_object_children() const;
  ::e8::SceneObject_SceneObjectChildren* release_scene_object_children();
  ::e8::SceneObject_SceneObjectChildren* mutable_scene_object_children();
  void set_allocated_scene_object_children(::e8::SceneObject_SceneObjectChildren* scene_object_children);
  private:
  const ::e8::SceneObject_SceneObjectChildren& _internal_scene_object_children() const;
  ::e8::SceneObject_SceneObjectChildren* _internal_mutable_scene_object_children();
  public:
  void unsafe_arena_set_allocated_scene_object_children(
      ::e8::SceneObject_SceneObjectChildren* scene_object_children);
  ::e8::SceneObject_SceneObjectChildren* unsafe_arena_release_scene_object_children();

  // .e8.SceneObject.SceneEntityChildren scene_entity_children = 5;
  bool has_scene_entity_children() const;
  private:
  bool _internal_has_scene_entity_children() const;
  public:
  void clear_scene_entity_children();
  const ::e8::SceneObject_SceneEntityChildren& scene_entity_children() const;
  ::e8::SceneObject_SceneEntityChildren* release_scene_entity_children();
  ::e8::SceneObject_SceneEntityChildren* mutable_scene_entity_children();
  void set_allocated_scene_entity_children(::e8::SceneObject_SceneEntityChildren* scene_entity_children);
  private:
  const ::e8::SceneObject_SceneEntityChildren& _internal_scene_entity_children() const;
  ::e8::SceneObject_SceneEntityChildren* _internal_mutable_scene_entity_children();
  public:
  void unsafe_arena_set_allocated_scene_entity_children(
      ::e8::SceneObject_SceneEntityChildren* scene_entity_children);
  ::e8::SceneObject_SceneEntityChildren* unsafe_arena_release_scene_entity_children();

  void clear_children();
  ChildrenCase children_case() const;
  // @@protoc_insertion_point(class_scope:e8.SceneObject)
 private:
  class _Internal;
  void set_has_scene_object_children();
  void set_has_scene_entity_children();

  inline bool has_children() const;
  inline void clear_has_children();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr procedural_object_id_;
  union ChildrenUnion {
    ChildrenUnion() {}
    ::e8::SceneObject_SceneObjectChildren* scene_object_children_;
    ::e8::SceneObject_SceneEntityChildren* scene_entity_children_;
  } children_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scene_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneObject_SceneObjectChildren

// repeated string scene_object_ids = 1;
inline int SceneObject_SceneObjectChildren::_internal_scene_object_ids_size() const {
  return scene_object_ids_.size();
}
inline int SceneObject_SceneObjectChildren::scene_object_ids_size() const {
  return _internal_scene_object_ids_size();
}
inline void SceneObject_SceneObjectChildren::clear_scene_object_ids() {
  scene_object_ids_.Clear();
}
inline std::string* SceneObject_SceneObjectChildren::add_scene_object_ids() {
  // @@protoc_insertion_point(field_add_mutable:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  return _internal_add_scene_object_ids();
}
inline const std::string& SceneObject_SceneObjectChildren::_internal_scene_object_ids(int index) const {
  return scene_object_ids_.Get(index);
}
inline const std::string& SceneObject_SceneObjectChildren::scene_object_ids(int index) const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  return _internal_scene_object_ids(index);
}
inline std::string* SceneObject_SceneObjectChildren::mutable_scene_object_ids(int index) {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  return scene_object_ids_.Mutable(index);
}
inline void SceneObject_SceneObjectChildren::set_scene_object_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  scene_object_ids_.Mutable(index)->assign(value);
}
inline void SceneObject_SceneObjectChildren::set_scene_object_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  scene_object_ids_.Mutable(index)->assign(std::move(value));
}
inline void SceneObject_SceneObjectChildren::set_scene_object_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scene_object_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline void SceneObject_SceneObjectChildren::set_scene_object_ids(int index, const char* value, size_t size) {
  scene_object_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline std::string* SceneObject_SceneObjectChildren::_internal_add_scene_object_ids() {
  return scene_object_ids_.Add();
}
inline void SceneObject_SceneObjectChildren::add_scene_object_ids(const std::string& value) {
  scene_object_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline void SceneObject_SceneObjectChildren::add_scene_object_ids(std::string&& value) {
  scene_object_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline void SceneObject_SceneObjectChildren::add_scene_object_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scene_object_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline void SceneObject_SceneObjectChildren::add_scene_object_ids(const char* value, size_t size) {
  scene_object_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:e8.SceneObject.SceneObjectChildren.scene_object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SceneObject_SceneObjectChildren::scene_object_ids() const {
  // @@protoc_insertion_point(field_list:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  return scene_object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SceneObject_SceneObjectChildren::mutable_scene_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:e8.SceneObject.SceneObjectChildren.scene_object_ids)
  return &scene_object_ids_;
}

// -------------------------------------------------------------------

// SceneObject_SceneEntityChildren

// repeated string scene_entity_ids = 1;
inline int SceneObject_SceneEntityChildren::_internal_scene_entity_ids_size() const {
  return scene_entity_ids_.size();
}
inline int SceneObject_SceneEntityChildren::scene_entity_ids_size() const {
  return _internal_scene_entity_ids_size();
}
inline void SceneObject_SceneEntityChildren::clear_scene_entity_ids() {
  scene_entity_ids_.Clear();
}
inline std::string* SceneObject_SceneEntityChildren::add_scene_entity_ids() {
  // @@protoc_insertion_point(field_add_mutable:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  return _internal_add_scene_entity_ids();
}
inline const std::string& SceneObject_SceneEntityChildren::_internal_scene_entity_ids(int index) const {
  return scene_entity_ids_.Get(index);
}
inline const std::string& SceneObject_SceneEntityChildren::scene_entity_ids(int index) const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  return _internal_scene_entity_ids(index);
}
inline std::string* SceneObject_SceneEntityChildren::mutable_scene_entity_ids(int index) {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  return scene_entity_ids_.Mutable(index);
}
inline void SceneObject_SceneEntityChildren::set_scene_entity_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  scene_entity_ids_.Mutable(index)->assign(value);
}
inline void SceneObject_SceneEntityChildren::set_scene_entity_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  scene_entity_ids_.Mutable(index)->assign(std::move(value));
}
inline void SceneObject_SceneEntityChildren::set_scene_entity_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scene_entity_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline void SceneObject_SceneEntityChildren::set_scene_entity_ids(int index, const char* value, size_t size) {
  scene_entity_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline std::string* SceneObject_SceneEntityChildren::_internal_add_scene_entity_ids() {
  return scene_entity_ids_.Add();
}
inline void SceneObject_SceneEntityChildren::add_scene_entity_ids(const std::string& value) {
  scene_entity_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline void SceneObject_SceneEntityChildren::add_scene_entity_ids(std::string&& value) {
  scene_entity_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline void SceneObject_SceneEntityChildren::add_scene_entity_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scene_entity_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline void SceneObject_SceneEntityChildren::add_scene_entity_ids(const char* value, size_t size) {
  scene_entity_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SceneObject_SceneEntityChildren::scene_entity_ids() const {
  // @@protoc_insertion_point(field_list:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  return scene_entity_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SceneObject_SceneEntityChildren::mutable_scene_entity_ids() {
  // @@protoc_insertion_point(field_mutable_list:e8.SceneObject.SceneEntityChildren.scene_entity_ids)
  return &scene_entity_ids_;
}

// -------------------------------------------------------------------

// SceneObject

// string id = 1;
inline void SceneObject::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneObject::id() const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.id)
  return _internal_id();
}
inline void SceneObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:e8.SceneObject.id)
}
inline std::string* SceneObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.id)
  return _internal_mutable_id();
}
inline const std::string& SceneObject::_internal_id() const {
  return id_.Get();
}
inline void SceneObject::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneObject::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.SceneObject.id)
}
inline void SceneObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.SceneObject.id)
}
inline void SceneObject::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.SceneObject.id)
}
inline std::string* SceneObject::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneObject::release_id() {
  // @@protoc_insertion_point(field_release:e8.SceneObject.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.SceneObject.id)
}
inline std::string* SceneObject::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneObject.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneObject::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneObject.id)
}

// string name = 2;
inline void SceneObject::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneObject::name() const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.name)
  return _internal_name();
}
inline void SceneObject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:e8.SceneObject.name)
}
inline std::string* SceneObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.name)
  return _internal_mutable_name();
}
inline const std::string& SceneObject::_internal_name() const {
  return name_.Get();
}
inline void SceneObject::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneObject::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.SceneObject.name)
}
inline void SceneObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.SceneObject.name)
}
inline void SceneObject::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.SceneObject.name)
}
inline std::string* SceneObject::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneObject::release_name() {
  // @@protoc_insertion_point(field_release:e8.SceneObject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.SceneObject.name)
}
inline std::string* SceneObject::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneObject.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneObject::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneObject.name)
}

// string procedural_object_id = 3;
inline void SceneObject::clear_procedural_object_id() {
  procedural_object_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneObject::procedural_object_id() const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.procedural_object_id)
  return _internal_procedural_object_id();
}
inline void SceneObject::set_procedural_object_id(const std::string& value) {
  _internal_set_procedural_object_id(value);
  // @@protoc_insertion_point(field_set:e8.SceneObject.procedural_object_id)
}
inline std::string* SceneObject::mutable_procedural_object_id() {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.procedural_object_id)
  return _internal_mutable_procedural_object_id();
}
inline const std::string& SceneObject::_internal_procedural_object_id() const {
  return procedural_object_id_.Get();
}
inline void SceneObject::_internal_set_procedural_object_id(const std::string& value) {
  
  procedural_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneObject::set_procedural_object_id(std::string&& value) {
  
  procedural_object_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.SceneObject.procedural_object_id)
}
inline void SceneObject::set_procedural_object_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  procedural_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.SceneObject.procedural_object_id)
}
inline void SceneObject::set_procedural_object_id(const char* value,
    size_t size) {
  
  procedural_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.SceneObject.procedural_object_id)
}
inline std::string* SceneObject::_internal_mutable_procedural_object_id() {
  
  return procedural_object_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneObject::release_procedural_object_id() {
  // @@protoc_insertion_point(field_release:e8.SceneObject.procedural_object_id)
  return procedural_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneObject::set_allocated_procedural_object_id(std::string* procedural_object_id) {
  if (procedural_object_id != nullptr) {
    
  } else {
    
  }
  procedural_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), procedural_object_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.SceneObject.procedural_object_id)
}
inline std::string* SceneObject::unsafe_arena_release_procedural_object_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneObject.procedural_object_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return procedural_object_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneObject::unsafe_arena_set_allocated_procedural_object_id(
    std::string* procedural_object_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (procedural_object_id != nullptr) {
    
  } else {
    
  }
  procedural_object_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      procedural_object_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneObject.procedural_object_id)
}

// .e8.SceneObject.SceneObjectChildren scene_object_children = 4;
inline bool SceneObject::_internal_has_scene_object_children() const {
  return children_case() == kSceneObjectChildren;
}
inline bool SceneObject::has_scene_object_children() const {
  return _internal_has_scene_object_children();
}
inline void SceneObject::set_has_scene_object_children() {
  _oneof_case_[0] = kSceneObjectChildren;
}
inline void SceneObject::clear_scene_object_children() {
  if (_internal_has_scene_object_children()) {
    if (GetArena() == nullptr) {
      delete children_.scene_object_children_;
    }
    clear_has_children();
  }
}
inline ::e8::SceneObject_SceneObjectChildren* SceneObject::release_scene_object_children() {
  // @@protoc_insertion_point(field_release:e8.SceneObject.scene_object_children)
  if (_internal_has_scene_object_children()) {
    clear_has_children();
      ::e8::SceneObject_SceneObjectChildren* temp = children_.scene_object_children_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    children_.scene_object_children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e8::SceneObject_SceneObjectChildren& SceneObject::_internal_scene_object_children() const {
  return _internal_has_scene_object_children()
      ? *children_.scene_object_children_
      : *reinterpret_cast< ::e8::SceneObject_SceneObjectChildren*>(&::e8::_SceneObject_SceneObjectChildren_default_instance_);
}
inline const ::e8::SceneObject_SceneObjectChildren& SceneObject::scene_object_children() const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.scene_object_children)
  return _internal_scene_object_children();
}
inline ::e8::SceneObject_SceneObjectChildren* SceneObject::unsafe_arena_release_scene_object_children() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneObject.scene_object_children)
  if (_internal_has_scene_object_children()) {
    clear_has_children();
    ::e8::SceneObject_SceneObjectChildren* temp = children_.scene_object_children_;
    children_.scene_object_children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SceneObject::unsafe_arena_set_allocated_scene_object_children(::e8::SceneObject_SceneObjectChildren* scene_object_children) {
  clear_children();
  if (scene_object_children) {
    set_has_scene_object_children();
    children_.scene_object_children_ = scene_object_children;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneObject.scene_object_children)
}
inline ::e8::SceneObject_SceneObjectChildren* SceneObject::_internal_mutable_scene_object_children() {
  if (!_internal_has_scene_object_children()) {
    clear_children();
    set_has_scene_object_children();
    children_.scene_object_children_ = CreateMaybeMessage< ::e8::SceneObject_SceneObjectChildren >(GetArena());
  }
  return children_.scene_object_children_;
}
inline ::e8::SceneObject_SceneObjectChildren* SceneObject::mutable_scene_object_children() {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.scene_object_children)
  return _internal_mutable_scene_object_children();
}

// .e8.SceneObject.SceneEntityChildren scene_entity_children = 5;
inline bool SceneObject::_internal_has_scene_entity_children() const {
  return children_case() == kSceneEntityChildren;
}
inline bool SceneObject::has_scene_entity_children() const {
  return _internal_has_scene_entity_children();
}
inline void SceneObject::set_has_scene_entity_children() {
  _oneof_case_[0] = kSceneEntityChildren;
}
inline void SceneObject::clear_scene_entity_children() {
  if (_internal_has_scene_entity_children()) {
    if (GetArena() == nullptr) {
      delete children_.scene_entity_children_;
    }
    clear_has_children();
  }
}
inline ::e8::SceneObject_SceneEntityChildren* SceneObject::release_scene_entity_children() {
  // @@protoc_insertion_point(field_release:e8.SceneObject.scene_entity_children)
  if (_internal_has_scene_entity_children()) {
    clear_has_children();
      ::e8::SceneObject_SceneEntityChildren* temp = children_.scene_entity_children_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    children_.scene_entity_children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e8::SceneObject_SceneEntityChildren& SceneObject::_internal_scene_entity_children() const {
  return _internal_has_scene_entity_children()
      ? *children_.scene_entity_children_
      : *reinterpret_cast< ::e8::SceneObject_SceneEntityChildren*>(&::e8::_SceneObject_SceneEntityChildren_default_instance_);
}
inline const ::e8::SceneObject_SceneEntityChildren& SceneObject::scene_entity_children() const {
  // @@protoc_insertion_point(field_get:e8.SceneObject.scene_entity_children)
  return _internal_scene_entity_children();
}
inline ::e8::SceneObject_SceneEntityChildren* SceneObject::unsafe_arena_release_scene_entity_children() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneObject.scene_entity_children)
  if (_internal_has_scene_entity_children()) {
    clear_has_children();
    ::e8::SceneObject_SceneEntityChildren* temp = children_.scene_entity_children_;
    children_.scene_entity_children_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SceneObject::unsafe_arena_set_allocated_scene_entity_children(::e8::SceneObject_SceneEntityChildren* scene_entity_children) {
  clear_children();
  if (scene_entity_children) {
    set_has_scene_entity_children();
    children_.scene_entity_children_ = scene_entity_children;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneObject.scene_entity_children)
}
inline ::e8::SceneObject_SceneEntityChildren* SceneObject::_internal_mutable_scene_entity_children() {
  if (!_internal_has_scene_entity_children()) {
    clear_children();
    set_has_scene_entity_children();
    children_.scene_entity_children_ = CreateMaybeMessage< ::e8::SceneObject_SceneEntityChildren >(GetArena());
  }
  return children_.scene_entity_children_;
}
inline ::e8::SceneObject_SceneEntityChildren* SceneObject::mutable_scene_entity_children() {
  // @@protoc_insertion_point(field_mutable:e8.SceneObject.scene_entity_children)
  return _internal_mutable_scene_entity_children();
}

inline bool SceneObject::has_children() const {
  return children_case() != CHILDREN_NOT_SET;
}
inline void SceneObject::clear_has_children() {
  _oneof_case_[0] = CHILDREN_NOT_SET;
}
inline SceneObject::ChildrenCase SceneObject::children_case() const {
  return SceneObject::ChildrenCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_5fobject_2eproto

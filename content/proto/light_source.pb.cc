// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light_source.proto

#include "light_source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_light_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointLight_light_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_light_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpotLight_light_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_light_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SunLight_light_5fsource_2eproto;
namespace e8 {
class SunLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SunLight> _instance;
} _SunLight_default_instance_;
class PointLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointLight> _instance;
} _PointLight_default_instance_;
class SpotLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotLight> _instance;
} _SpotLight_default_instance_;
class LightSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightSource> _instance;
  const ::e8::SunLight* sun_light_;
  const ::e8::PointLight* point_light_;
  const ::e8::SpotLight* spot_light_;
} _LightSource_default_instance_;
}  // namespace e8
static void InitDefaultsscc_info_LightSource_light_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_LightSource_default_instance_;
    new (ptr) ::e8::LightSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::LightSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LightSource_light_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LightSource_light_5fsource_2eproto}, {
      &scc_info_SunLight_light_5fsource_2eproto.base,
      &scc_info_PointLight_light_5fsource_2eproto.base,
      &scc_info_SpotLight_light_5fsource_2eproto.base,}};

static void InitDefaultsscc_info_PointLight_light_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_PointLight_default_instance_;
    new (ptr) ::e8::PointLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::PointLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointLight_light_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointLight_light_5fsource_2eproto}, {}};

static void InitDefaultsscc_info_SpotLight_light_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_SpotLight_default_instance_;
    new (ptr) ::e8::SpotLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::SpotLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpotLight_light_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpotLight_light_5fsource_2eproto}, {}};

static void InitDefaultsscc_info_SunLight_light_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_SunLight_default_instance_;
    new (ptr) ::e8::SunLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::SunLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SunLight_light_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SunLight_light_5fsource_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_light_5fsource_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_light_5fsource_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_light_5fsource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_light_5fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::SunLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::SunLight, direction_),
  PROTOBUF_FIELD_OFFSET(::e8::SunLight, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::PointLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::PointLight, position_),
  PROTOBUF_FIELD_OFFSET(::e8::PointLight, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, position_),
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, direction_),
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, intensity_),
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, inner_cone_angle_),
  PROTOBUF_FIELD_OFFSET(::e8::SpotLight, outer_cone_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e8::LightSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::e8::LightSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::e8::LightSourceDefaultTypeInternal, sun_light_),
  offsetof(::e8::LightSourceDefaultTypeInternal, point_light_),
  offsetof(::e8::LightSourceDefaultTypeInternal, spot_light_),
  PROTOBUF_FIELD_OFFSET(::e8::LightSource, model_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::SunLight)},
  { 7, -1, sizeof(::e8::PointLight)},
  { 14, -1, sizeof(::e8::SpotLight)},
  { 24, -1, sizeof(::e8::LightSource)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_SunLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_PointLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_SpotLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::e8::_LightSource_default_instance_),
};

const char descriptor_table_protodef_light_5fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022light_source.proto\022\002e8\"0\n\010SunLight\022\021\n\t"
  "direction\030\001 \003(\002\022\021\n\tintensity\030\002 \003(\002\"1\n\nPo"
  "intLight\022\020\n\010position\030\001 \003(\002\022\021\n\tintensity\030"
  "\002 \003(\002\"w\n\tSpotLight\022\020\n\010position\030\001 \003(\002\022\021\n\t"
  "direction\030\002 \003(\002\022\021\n\tintensity\030\003 \003(\002\022\030\n\020in"
  "ner_cone_angle\030\004 \001(\002\022\030\n\020outer_cone_angle"
  "\030\005 \001(\002\"\205\001\n\013LightSource\022!\n\tsun_light\030\001 \001("
  "\0132\014.e8.SunLightH\000\022%\n\013point_light\030\002 \001(\0132\016"
  ".e8.PointLightH\000\022#\n\nspot_light\030\003 \001(\0132\r.e"
  "8.SpotLightH\000B\007\n\005modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_light_5fsource_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_light_5fsource_2eproto_sccs[4] = {
  &scc_info_LightSource_light_5fsource_2eproto.base,
  &scc_info_PointLight_light_5fsource_2eproto.base,
  &scc_info_SpotLight_light_5fsource_2eproto.base,
  &scc_info_SunLight_light_5fsource_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_light_5fsource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_light_5fsource_2eproto = {
  false, false, descriptor_table_protodef_light_5fsource_2eproto, "light_source.proto", 390,
  &descriptor_table_light_5fsource_2eproto_once, descriptor_table_light_5fsource_2eproto_sccs, descriptor_table_light_5fsource_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_light_5fsource_2eproto::offsets,
  file_level_metadata_light_5fsource_2eproto, 4, file_level_enum_descriptors_light_5fsource_2eproto, file_level_service_descriptors_light_5fsource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_light_5fsource_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_light_5fsource_2eproto)), true);
namespace e8 {

// ===================================================================

void SunLight::InitAsDefaultInstance() {
}
class SunLight::_Internal {
 public:
};

SunLight::SunLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  direction_(arena),
  intensity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.SunLight)
}
SunLight::SunLight(const SunLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      direction_(from.direction_),
      intensity_(from.intensity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:e8.SunLight)
}

void SunLight::SharedCtor() {
}

SunLight::~SunLight() {
  // @@protoc_insertion_point(destructor:e8.SunLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SunLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SunLight::ArenaDtor(void* object) {
  SunLight* _this = reinterpret_cast< SunLight* >(object);
  (void)_this;
}
void SunLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SunLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SunLight& SunLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SunLight_light_5fsource_2eproto.base);
  return *internal_default_instance();
}


void SunLight::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.SunLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_.Clear();
  intensity_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SunLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_direction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_direction(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SunLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.SunLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float direction = 1;
  if (this->_internal_direction_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_direction(), target);
  }

  // repeated float intensity = 2;
  if (this->_internal_intensity_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.SunLight)
  return target;
}

size_t SunLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.SunLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float direction = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_direction_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _direction_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float intensity = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SunLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.SunLight)
  GOOGLE_DCHECK_NE(&from, this);
  const SunLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SunLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.SunLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.SunLight)
    MergeFrom(*source);
  }
}

void SunLight::MergeFrom(const SunLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.SunLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  direction_.MergeFrom(from.direction_);
  intensity_.MergeFrom(from.intensity_);
}

void SunLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.SunLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SunLight::CopyFrom(const SunLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.SunLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SunLight::IsInitialized() const {
  return true;
}

void SunLight::InternalSwap(SunLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  direction_.InternalSwap(&other->direction_);
  intensity_.InternalSwap(&other->intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SunLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointLight::InitAsDefaultInstance() {
}
class PointLight::_Internal {
 public:
};

PointLight::PointLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  intensity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.PointLight)
}
PointLight::PointLight(const PointLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      intensity_(from.intensity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:e8.PointLight)
}

void PointLight::SharedCtor() {
}

PointLight::~PointLight() {
  // @@protoc_insertion_point(destructor:e8.PointLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointLight::ArenaDtor(void* object) {
  PointLight* _this = reinterpret_cast< PointLight* >(object);
  (void)_this;
}
void PointLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PointLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointLight& PointLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointLight_light_5fsource_2eproto.base);
  return *internal_default_instance();
}


void PointLight::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.PointLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  intensity_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.PointLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_position(), target);
  }

  // repeated float intensity = 2;
  if (this->_internal_intensity_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.PointLight)
  return target;
}

size_t PointLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.PointLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float intensity = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.PointLight)
  GOOGLE_DCHECK_NE(&from, this);
  const PointLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.PointLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.PointLight)
    MergeFrom(*source);
  }
}

void PointLight::MergeFrom(const PointLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.PointLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  intensity_.MergeFrom(from.intensity_);
}

void PointLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.PointLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointLight::CopyFrom(const PointLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.PointLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLight::IsInitialized() const {
  return true;
}

void PointLight::InternalSwap(PointLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  intensity_.InternalSwap(&other->intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpotLight::InitAsDefaultInstance() {
}
class SpotLight::_Internal {
 public:
};

SpotLight::SpotLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  direction_(arena),
  intensity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.SpotLight)
}
SpotLight::SpotLight(const SpotLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      position_(from.position_),
      direction_(from.direction_),
      intensity_(from.intensity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inner_cone_angle_, &from.inner_cone_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&outer_cone_angle_) -
    reinterpret_cast<char*>(&inner_cone_angle_)) + sizeof(outer_cone_angle_));
  // @@protoc_insertion_point(copy_constructor:e8.SpotLight)
}

void SpotLight::SharedCtor() {
  ::memset(&inner_cone_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_cone_angle_) -
      reinterpret_cast<char*>(&inner_cone_angle_)) + sizeof(outer_cone_angle_));
}

SpotLight::~SpotLight() {
  // @@protoc_insertion_point(destructor:e8.SpotLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpotLight::ArenaDtor(void* object) {
  SpotLight* _this = reinterpret_cast< SpotLight* >(object);
  (void)_this;
}
void SpotLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotLight& SpotLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotLight_light_5fsource_2eproto.base);
  return *internal_default_instance();
}


void SpotLight::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.SpotLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  direction_.Clear();
  intensity_.Clear();
  ::memset(&inner_cone_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_cone_angle_) -
      reinterpret_cast<char*>(&inner_cone_angle_)) + sizeof(outer_cone_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_direction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_direction(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float inner_cone_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          inner_cone_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float outer_cone_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          outer_cone_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.SpotLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1;
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_position(), target);
  }

  // repeated float direction = 2;
  if (this->_internal_direction_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_direction(), target);
  }

  // repeated float intensity = 3;
  if (this->_internal_intensity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_intensity(), target);
  }

  // float inner_cone_angle = 4;
  if (!(this->inner_cone_angle() <= 0 && this->inner_cone_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_inner_cone_angle(), target);
  }

  // float outer_cone_angle = 5;
  if (!(this->outer_cone_angle() <= 0 && this->outer_cone_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_outer_cone_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.SpotLight)
  return target;
}

size_t SpotLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.SpotLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float direction = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_direction_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _direction_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float intensity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float inner_cone_angle = 4;
  if (!(this->inner_cone_angle() <= 0 && this->inner_cone_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float outer_cone_angle = 5;
  if (!(this->outer_cone_angle() <= 0 && this->outer_cone_angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.SpotLight)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.SpotLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.SpotLight)
    MergeFrom(*source);
  }
}

void SpotLight::MergeFrom(const SpotLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.SpotLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  direction_.MergeFrom(from.direction_);
  intensity_.MergeFrom(from.intensity_);
  if (!(from.inner_cone_angle() <= 0 && from.inner_cone_angle() >= 0)) {
    _internal_set_inner_cone_angle(from._internal_inner_cone_angle());
  }
  if (!(from.outer_cone_angle() <= 0 && from.outer_cone_angle() >= 0)) {
    _internal_set_outer_cone_angle(from._internal_outer_cone_angle());
  }
}

void SpotLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.SpotLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotLight::CopyFrom(const SpotLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.SpotLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotLight::IsInitialized() const {
  return true;
}

void SpotLight::InternalSwap(SpotLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  position_.InternalSwap(&other->position_);
  direction_.InternalSwap(&other->direction_);
  intensity_.InternalSwap(&other->intensity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotLight, outer_cone_angle_)
      + sizeof(SpotLight::outer_cone_angle_)
      - PROTOBUF_FIELD_OFFSET(SpotLight, inner_cone_angle_)>(
          reinterpret_cast<char*>(&inner_cone_angle_),
          reinterpret_cast<char*>(&other->inner_cone_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LightSource::InitAsDefaultInstance() {
  ::e8::_LightSource_default_instance_.sun_light_ = const_cast< ::e8::SunLight*>(
      ::e8::SunLight::internal_default_instance());
  ::e8::_LightSource_default_instance_.point_light_ = const_cast< ::e8::PointLight*>(
      ::e8::PointLight::internal_default_instance());
  ::e8::_LightSource_default_instance_.spot_light_ = const_cast< ::e8::SpotLight*>(
      ::e8::SpotLight::internal_default_instance());
}
class LightSource::_Internal {
 public:
  static const ::e8::SunLight& sun_light(const LightSource* msg);
  static const ::e8::PointLight& point_light(const LightSource* msg);
  static const ::e8::SpotLight& spot_light(const LightSource* msg);
};

const ::e8::SunLight&
LightSource::_Internal::sun_light(const LightSource* msg) {
  return *msg->model_.sun_light_;
}
const ::e8::PointLight&
LightSource::_Internal::point_light(const LightSource* msg) {
  return *msg->model_.point_light_;
}
const ::e8::SpotLight&
LightSource::_Internal::spot_light(const LightSource* msg) {
  return *msg->model_.spot_light_;
}
void LightSource::set_allocated_sun_light(::e8::SunLight* sun_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_model();
  if (sun_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sun_light);
    if (message_arena != submessage_arena) {
      sun_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun_light, submessage_arena);
    }
    set_has_sun_light();
    model_.sun_light_ = sun_light;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.LightSource.sun_light)
}
void LightSource::set_allocated_point_light(::e8::PointLight* point_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_model();
  if (point_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_light);
    if (message_arena != submessage_arena) {
      point_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_light, submessage_arena);
    }
    set_has_point_light();
    model_.point_light_ = point_light;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.LightSource.point_light)
}
void LightSource::set_allocated_spot_light(::e8::SpotLight* spot_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_model();
  if (spot_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spot_light);
    if (message_arena != submessage_arena) {
      spot_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot_light, submessage_arena);
    }
    set_has_spot_light();
    model_.spot_light_ = spot_light;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.LightSource.spot_light)
}
LightSource::LightSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:e8.LightSource)
}
LightSource::LightSource(const LightSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_model();
  switch (from.model_case()) {
    case kSunLight: {
      _internal_mutable_sun_light()->::e8::SunLight::MergeFrom(from._internal_sun_light());
      break;
    }
    case kPointLight: {
      _internal_mutable_point_light()->::e8::PointLight::MergeFrom(from._internal_point_light());
      break;
    }
    case kSpotLight: {
      _internal_mutable_spot_light()->::e8::SpotLight::MergeFrom(from._internal_spot_light());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:e8.LightSource)
}

void LightSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightSource_light_5fsource_2eproto.base);
  clear_has_model();
}

LightSource::~LightSource() {
  // @@protoc_insertion_point(destructor:e8.LightSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LightSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_model()) {
    clear_model();
  }
}

void LightSource::ArenaDtor(void* object) {
  LightSource* _this = reinterpret_cast< LightSource* >(object);
  (void)_this;
}
void LightSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LightSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightSource& LightSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightSource_light_5fsource_2eproto.base);
  return *internal_default_instance();
}


void LightSource::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:e8.LightSource)
  switch (model_case()) {
    case kSunLight: {
      if (GetArena() == nullptr) {
        delete model_.sun_light_;
      }
      break;
    }
    case kPointLight: {
      if (GetArena() == nullptr) {
        delete model_.point_light_;
      }
      break;
    }
    case kSpotLight: {
      if (GetArena() == nullptr) {
        delete model_.spot_light_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void LightSource::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.LightSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_model();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .e8.SunLight sun_light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.PointLight point_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .e8.SpotLight spot_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spot_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:e8.LightSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e8.SunLight sun_light = 1;
  if (_internal_has_sun_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sun_light(this), target, stream);
  }

  // .e8.PointLight point_light = 2;
  if (_internal_has_point_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point_light(this), target, stream);
  }

  // .e8.SpotLight spot_light = 3;
  if (_internal_has_spot_light()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spot_light(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.LightSource)
  return target;
}

size_t LightSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.LightSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (model_case()) {
    // .e8.SunLight sun_light = 1;
    case kSunLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.sun_light_);
      break;
    }
    // .e8.PointLight point_light = 2;
    case kPointLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.point_light_);
      break;
    }
    // .e8.SpotLight spot_light = 3;
    case kSpotLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.spot_light_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.LightSource)
  GOOGLE_DCHECK_NE(&from, this);
  const LightSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.LightSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.LightSource)
    MergeFrom(*source);
  }
}

void LightSource::MergeFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.LightSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.model_case()) {
    case kSunLight: {
      _internal_mutable_sun_light()->::e8::SunLight::MergeFrom(from._internal_sun_light());
      break;
    }
    case kPointLight: {
      _internal_mutable_point_light()->::e8::PointLight::MergeFrom(from._internal_point_light());
      break;
    }
    case kSpotLight: {
      _internal_mutable_spot_light()->::e8::SpotLight::MergeFrom(from._internal_spot_light());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
}

void LightSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSource::CopyFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSource::IsInitialized() const {
  return true;
}

void LightSource::InternalSwap(LightSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightSource::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::e8::SunLight* Arena::CreateMaybeMessage< ::e8::SunLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::SunLight >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::PointLight* Arena::CreateMaybeMessage< ::e8::PointLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::PointLight >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::SpotLight* Arena::CreateMaybeMessage< ::e8::SpotLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::SpotLight >(arena);
}
template<> PROTOBUF_NOINLINE ::e8::LightSource* Arena::CreateMaybeMessage< ::e8::LightSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::e8::LightSource >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

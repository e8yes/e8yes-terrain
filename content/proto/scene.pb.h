// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "camera.pb.h"
#include "procedural_object.pb.h"
#include "scene_object.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto;
namespace e8 {
class SceneProto;
class SceneProtoDefaultTypeInternal;
extern SceneProtoDefaultTypeInternal _SceneProto_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::SceneProto* Arena::CreateMaybeMessage<::e8::SceneProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

enum SceneProto_StructureType : int {
  SceneProto_StructureType_INVALID = 0,
  SceneProto_StructureType_LINEAR = 1,
  SceneProto_StructureType_OCTREE = 2,
  SceneProto_StructureType_SceneProto_StructureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SceneProto_StructureType_SceneProto_StructureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SceneProto_StructureType_IsValid(int value);
constexpr SceneProto_StructureType SceneProto_StructureType_StructureType_MIN = SceneProto_StructureType_INVALID;
constexpr SceneProto_StructureType SceneProto_StructureType_StructureType_MAX = SceneProto_StructureType_OCTREE;
constexpr int SceneProto_StructureType_StructureType_ARRAYSIZE = SceneProto_StructureType_StructureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SceneProto_StructureType_descriptor();
template<typename T>
inline const std::string& SceneProto_StructureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SceneProto_StructureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SceneProto_StructureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SceneProto_StructureType_descriptor(), enum_t_value);
}
inline bool SceneProto_StructureType_Parse(
    const std::string& name, SceneProto_StructureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SceneProto_StructureType>(
    SceneProto_StructureType_descriptor(), name, value);
}
// ===================================================================

class SceneProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.SceneProto) */ {
 public:
  inline SceneProto() : SceneProto(nullptr) {};
  virtual ~SceneProto();

  SceneProto(const SceneProto& from);
  SceneProto(SceneProto&& from) noexcept
    : SceneProto() {
    *this = ::std::move(from);
  }

  inline SceneProto& operator=(const SceneProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneProto& operator=(SceneProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneProto* internal_default_instance() {
    return reinterpret_cast<const SceneProto*>(
               &_SceneProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneProto& a, SceneProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneProto* New() const final {
    return CreateMaybeMessage<SceneProto>(nullptr);
  }

  SceneProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneProto& from);
  void MergeFrom(const SceneProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.SceneProto";
  }
  protected:
  explicit SceneProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_2eproto);
    return ::descriptor_table_scene_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SceneProto_StructureType StructureType;
  static constexpr StructureType INVALID =
    SceneProto_StructureType_INVALID;
  static constexpr StructureType LINEAR =
    SceneProto_StructureType_LINEAR;
  static constexpr StructureType OCTREE =
    SceneProto_StructureType_OCTREE;
  static inline bool StructureType_IsValid(int value) {
    return SceneProto_StructureType_IsValid(value);
  }
  static constexpr StructureType StructureType_MIN =
    SceneProto_StructureType_StructureType_MIN;
  static constexpr StructureType StructureType_MAX =
    SceneProto_StructureType_StructureType_MAX;
  static constexpr int StructureType_ARRAYSIZE =
    SceneProto_StructureType_StructureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StructureType_descriptor() {
    return SceneProto_StructureType_descriptor();
  }
  template<typename T>
  static inline const std::string& StructureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StructureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StructureType_Name.");
    return SceneProto_StructureType_Name(enum_t_value);
  }
  static inline bool StructureType_Parse(const std::string& name,
      StructureType* value) {
    return SceneProto_StructureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundColorFieldNumber = 4,
    kPreceduralObjectsFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCameraFieldNumber = 5,
    kSceneObjectsFieldNumber = 6,
    kStructureTypeFieldNumber = 3,
  };
  // repeated float background_color = 4;
  int background_color_size() const;
  private:
  int _internal_background_color_size() const;
  public:
  void clear_background_color();
  private:
  float _internal_background_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_background_color() const;
  void _internal_add_background_color(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_background_color();
  public:
  float background_color(int index) const;
  void set_background_color(int index, float value);
  void add_background_color(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      background_color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_background_color();

  // repeated .e8.ProceduralObjectProto precedural_objects = 7;
  int precedural_objects_size() const;
  private:
  int _internal_precedural_objects_size() const;
  public:
  void clear_precedural_objects();
  ::e8::ProceduralObjectProto* mutable_precedural_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::ProceduralObjectProto >*
      mutable_precedural_objects();
  private:
  const ::e8::ProceduralObjectProto& _internal_precedural_objects(int index) const;
  ::e8::ProceduralObjectProto* _internal_add_precedural_objects();
  public:
  const ::e8::ProceduralObjectProto& precedural_objects(int index) const;
  ::e8::ProceduralObjectProto* add_precedural_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::ProceduralObjectProto >&
      precedural_objects() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .e8.Camera camera = 5;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::e8::Camera& camera() const;
  ::e8::Camera* release_camera();
  ::e8::Camera* mutable_camera();
  void set_allocated_camera(::e8::Camera* camera);
  private:
  const ::e8::Camera& _internal_camera() const;
  ::e8::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::e8::Camera* camera);
  ::e8::Camera* unsafe_arena_release_camera();

  // .e8.SceneObjectCollection scene_objects = 6;
  bool has_scene_objects() const;
  private:
  bool _internal_has_scene_objects() const;
  public:
  void clear_scene_objects();
  const ::e8::SceneObjectCollection& scene_objects() const;
  ::e8::SceneObjectCollection* release_scene_objects();
  ::e8::SceneObjectCollection* mutable_scene_objects();
  void set_allocated_scene_objects(::e8::SceneObjectCollection* scene_objects);
  private:
  const ::e8::SceneObjectCollection& _internal_scene_objects() const;
  ::e8::SceneObjectCollection* _internal_mutable_scene_objects();
  public:
  void unsafe_arena_set_allocated_scene_objects(
      ::e8::SceneObjectCollection* scene_objects);
  ::e8::SceneObjectCollection* unsafe_arena_release_scene_objects();

  // .e8.SceneProto.StructureType structure_type = 3;
  void clear_structure_type();
  ::e8::SceneProto_StructureType structure_type() const;
  void set_structure_type(::e8::SceneProto_StructureType value);
  private:
  ::e8::SceneProto_StructureType _internal_structure_type() const;
  void _internal_set_structure_type(::e8::SceneProto_StructureType value);
  public:

  // @@protoc_insertion_point(class_scope:e8.SceneProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > background_color_;
  mutable std::atomic<int> _background_color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::ProceduralObjectProto > precedural_objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::e8::Camera* camera_;
  ::e8::SceneObjectCollection* scene_objects_;
  int structure_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneProto

// string id = 1;
inline void SceneProto::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneProto::id() const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.id)
  return _internal_id();
}
inline void SceneProto::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:e8.SceneProto.id)
}
inline std::string* SceneProto::mutable_id() {
  // @@protoc_insertion_point(field_mutable:e8.SceneProto.id)
  return _internal_mutable_id();
}
inline const std::string& SceneProto::_internal_id() const {
  return id_.Get();
}
inline void SceneProto::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneProto::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.SceneProto.id)
}
inline void SceneProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.SceneProto.id)
}
inline void SceneProto::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.SceneProto.id)
}
inline std::string* SceneProto::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneProto::release_id() {
  // @@protoc_insertion_point(field_release:e8.SceneProto.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.SceneProto.id)
}
inline std::string* SceneProto::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneProto.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneProto::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneProto.id)
}

// string name = 2;
inline void SceneProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneProto::name() const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.name)
  return _internal_name();
}
inline void SceneProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:e8.SceneProto.name)
}
inline std::string* SceneProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:e8.SceneProto.name)
  return _internal_mutable_name();
}
inline const std::string& SceneProto::_internal_name() const {
  return name_.Get();
}
inline void SceneProto::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneProto::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:e8.SceneProto.name)
}
inline void SceneProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:e8.SceneProto.name)
}
inline void SceneProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:e8.SceneProto.name)
}
inline std::string* SceneProto::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneProto::release_name() {
  // @@protoc_insertion_point(field_release:e8.SceneProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:e8.SceneProto.name)
}
inline std::string* SceneProto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:e8.SceneProto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneProto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneProto.name)
}

// .e8.SceneProto.StructureType structure_type = 3;
inline void SceneProto::clear_structure_type() {
  structure_type_ = 0;
}
inline ::e8::SceneProto_StructureType SceneProto::_internal_structure_type() const {
  return static_cast< ::e8::SceneProto_StructureType >(structure_type_);
}
inline ::e8::SceneProto_StructureType SceneProto::structure_type() const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.structure_type)
  return _internal_structure_type();
}
inline void SceneProto::_internal_set_structure_type(::e8::SceneProto_StructureType value) {
  
  structure_type_ = value;
}
inline void SceneProto::set_structure_type(::e8::SceneProto_StructureType value) {
  _internal_set_structure_type(value);
  // @@protoc_insertion_point(field_set:e8.SceneProto.structure_type)
}

// repeated float background_color = 4;
inline int SceneProto::_internal_background_color_size() const {
  return background_color_.size();
}
inline int SceneProto::background_color_size() const {
  return _internal_background_color_size();
}
inline void SceneProto::clear_background_color() {
  background_color_.Clear();
}
inline float SceneProto::_internal_background_color(int index) const {
  return background_color_.Get(index);
}
inline float SceneProto::background_color(int index) const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.background_color)
  return _internal_background_color(index);
}
inline void SceneProto::set_background_color(int index, float value) {
  background_color_.Set(index, value);
  // @@protoc_insertion_point(field_set:e8.SceneProto.background_color)
}
inline void SceneProto::_internal_add_background_color(float value) {
  background_color_.Add(value);
}
inline void SceneProto::add_background_color(float value) {
  _internal_add_background_color(value);
  // @@protoc_insertion_point(field_add:e8.SceneProto.background_color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SceneProto::_internal_background_color() const {
  return background_color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SceneProto::background_color() const {
  // @@protoc_insertion_point(field_list:e8.SceneProto.background_color)
  return _internal_background_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SceneProto::_internal_mutable_background_color() {
  return &background_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SceneProto::mutable_background_color() {
  // @@protoc_insertion_point(field_mutable_list:e8.SceneProto.background_color)
  return _internal_mutable_background_color();
}

// .e8.Camera camera = 5;
inline bool SceneProto::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool SceneProto::has_camera() const {
  return _internal_has_camera();
}
inline const ::e8::Camera& SceneProto::_internal_camera() const {
  const ::e8::Camera* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::Camera*>(
      &::e8::_Camera_default_instance_);
}
inline const ::e8::Camera& SceneProto::camera() const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.camera)
  return _internal_camera();
}
inline void SceneProto::unsafe_arena_set_allocated_camera(
    ::e8::Camera* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneProto.camera)
}
inline ::e8::Camera* SceneProto::release_camera() {
  auto temp = unsafe_arena_release_camera();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::Camera* SceneProto::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:e8.SceneProto.camera)
  
  ::e8::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::e8::Camera* SceneProto::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::Camera>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::e8::Camera* SceneProto::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:e8.SceneProto.camera)
  return _internal_mutable_camera();
}
inline void SceneProto::set_allocated_camera(::e8::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera)->GetArena();
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:e8.SceneProto.camera)
}

// .e8.SceneObjectCollection scene_objects = 6;
inline bool SceneProto::_internal_has_scene_objects() const {
  return this != internal_default_instance() && scene_objects_ != nullptr;
}
inline bool SceneProto::has_scene_objects() const {
  return _internal_has_scene_objects();
}
inline const ::e8::SceneObjectCollection& SceneProto::_internal_scene_objects() const {
  const ::e8::SceneObjectCollection* p = scene_objects_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::SceneObjectCollection*>(
      &::e8::_SceneObjectCollection_default_instance_);
}
inline const ::e8::SceneObjectCollection& SceneProto::scene_objects() const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.scene_objects)
  return _internal_scene_objects();
}
inline void SceneProto::unsafe_arena_set_allocated_scene_objects(
    ::e8::SceneObjectCollection* scene_objects) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_objects_);
  }
  scene_objects_ = scene_objects;
  if (scene_objects) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.SceneProto.scene_objects)
}
inline ::e8::SceneObjectCollection* SceneProto::release_scene_objects() {
  auto temp = unsafe_arena_release_scene_objects();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::SceneObjectCollection* SceneProto::unsafe_arena_release_scene_objects() {
  // @@protoc_insertion_point(field_release:e8.SceneProto.scene_objects)
  
  ::e8::SceneObjectCollection* temp = scene_objects_;
  scene_objects_ = nullptr;
  return temp;
}
inline ::e8::SceneObjectCollection* SceneProto::_internal_mutable_scene_objects() {
  
  if (scene_objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::SceneObjectCollection>(GetArena());
    scene_objects_ = p;
  }
  return scene_objects_;
}
inline ::e8::SceneObjectCollection* SceneProto::mutable_scene_objects() {
  // @@protoc_insertion_point(field_mutable:e8.SceneProto.scene_objects)
  return _internal_mutable_scene_objects();
}
inline void SceneProto::set_allocated_scene_objects(::e8::SceneObjectCollection* scene_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_objects_);
  }
  if (scene_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_objects)->GetArena();
    if (message_arena != submessage_arena) {
      scene_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene_objects, submessage_arena);
    }
    
  } else {
    
  }
  scene_objects_ = scene_objects;
  // @@protoc_insertion_point(field_set_allocated:e8.SceneProto.scene_objects)
}

// repeated .e8.ProceduralObjectProto precedural_objects = 7;
inline int SceneProto::_internal_precedural_objects_size() const {
  return precedural_objects_.size();
}
inline int SceneProto::precedural_objects_size() const {
  return _internal_precedural_objects_size();
}
inline ::e8::ProceduralObjectProto* SceneProto::mutable_precedural_objects(int index) {
  // @@protoc_insertion_point(field_mutable:e8.SceneProto.precedural_objects)
  return precedural_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::ProceduralObjectProto >*
SceneProto::mutable_precedural_objects() {
  // @@protoc_insertion_point(field_mutable_list:e8.SceneProto.precedural_objects)
  return &precedural_objects_;
}
inline const ::e8::ProceduralObjectProto& SceneProto::_internal_precedural_objects(int index) const {
  return precedural_objects_.Get(index);
}
inline const ::e8::ProceduralObjectProto& SceneProto::precedural_objects(int index) const {
  // @@protoc_insertion_point(field_get:e8.SceneProto.precedural_objects)
  return _internal_precedural_objects(index);
}
inline ::e8::ProceduralObjectProto* SceneProto::_internal_add_precedural_objects() {
  return precedural_objects_.Add();
}
inline ::e8::ProceduralObjectProto* SceneProto::add_precedural_objects() {
  // @@protoc_insertion_point(field_add:e8.SceneProto.precedural_objects)
  return _internal_add_precedural_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::e8::ProceduralObjectProto >&
SceneProto::precedural_objects() const {
  // @@protoc_insertion_point(field_list:e8.SceneProto.precedural_objects)
  return precedural_objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::e8::SceneProto_StructureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::SceneProto_StructureType>() {
  return ::e8::SceneProto_StructureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

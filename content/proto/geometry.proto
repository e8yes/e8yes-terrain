/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "primitive.proto";

/**
 * @brief The GeometryProto message Represents an object's geometry as triangle mesh.
 */
message GeometryProto {
    /**
     * @brief The RigidityType enum The type of rigidity to be expected for this geometry.
     */
    enum RigidityType {
        INVALID = 0;

        // This geometry can neither be moved nor changed.
        STATIC = 1;

        // The geometry can never change though it can be moved around through homogeneous
        // transformation.
        RIGID = 2;

        // The vertices of this geometry can be changed at any moment. However, the topology stays
        // the same.
        DEFORMABLE = 3;

        // Even the topology of this geometry can be changed at any moment.
        TEARABLE = 4;
    };

    // The type of rigidity to be expected for this geometry.
    RigidityType rigidity = 1;

    // A list of vertices defining the geometry of this geometry.
    repeated PrimitiveVertexProto vertices = 2;

    // Defines triangle primitives by referencing the vertices of each triangle from the vertex 
    // list returned by the above function.
    repeated PrimitiveIndicesProto primitives = 3;
};

/**
 * @brief The GeometryLod message Allows complex geometry to be represented with less detail at
 * distance.
 */
message GeometryLodProto {
    // ID of this geometry design.
    string id = 1;

    // A descriptive human readable name of this geometry.
    string name = 2;

    // LOD of this geometry design in descending level of detail.
    repeated GeometryProto geometry_lod = 3;

    // A list the same length as the geometry_lod specifying the minimum distance the geometry LOD is
    // from the viewer before it can be applied to the rendering process. Therefore, the distances
    // are expected to be in ascending order. The renderer will pick the geometry with the least
    // possible detail when possible.
    repeated float min_distances = 4;
};

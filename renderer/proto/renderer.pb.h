// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_renderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_renderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_renderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_renderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_renderer_2eproto;
namespace e8 {
class DepthRendererParameters;
class DepthRendererParametersDefaultTypeInternal;
extern DepthRendererParametersDefaultTypeInternal _DepthRendererParameters_default_instance_;
class LightInputsRendererParameters;
class LightInputsRendererParametersDefaultTypeInternal;
extern LightInputsRendererParametersDefaultTypeInternal _LightInputsRendererParameters_default_instance_;
class RadianceRendererParameters;
class RadianceRendererParametersDefaultTypeInternal;
extern RadianceRendererParametersDefaultTypeInternal _RadianceRendererParameters_default_instance_;
class RadiosityRendererParameters;
class RadiosityRendererParametersDefaultTypeInternal;
extern RadiosityRendererParametersDefaultTypeInternal _RadiosityRendererParameters_default_instance_;
class RendererConfiguration;
class RendererConfigurationDefaultTypeInternal;
extern RendererConfigurationDefaultTypeInternal _RendererConfiguration_default_instance_;
class SolidColorRendererParameters;
class SolidColorRendererParametersDefaultTypeInternal;
extern SolidColorRendererParametersDefaultTypeInternal _SolidColorRendererParameters_default_instance_;
}  // namespace e8
PROTOBUF_NAMESPACE_OPEN
template<> ::e8::DepthRendererParameters* Arena::CreateMaybeMessage<::e8::DepthRendererParameters>(Arena*);
template<> ::e8::LightInputsRendererParameters* Arena::CreateMaybeMessage<::e8::LightInputsRendererParameters>(Arena*);
template<> ::e8::RadianceRendererParameters* Arena::CreateMaybeMessage<::e8::RadianceRendererParameters>(Arena*);
template<> ::e8::RadiosityRendererParameters* Arena::CreateMaybeMessage<::e8::RadiosityRendererParameters>(Arena*);
template<> ::e8::RendererConfiguration* Arena::CreateMaybeMessage<::e8::RendererConfiguration>(Arena*);
template<> ::e8::SolidColorRendererParameters* Arena::CreateMaybeMessage<::e8::SolidColorRendererParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace e8 {

enum LightInputsRendererParameters_InputType : int {
  LightInputsRendererParameters_InputType_INVALID = 0,
  LightInputsRendererParameters_InputType_ALBEDO = 1,
  LightInputsRendererParameters_InputType_NORMAL = 2,
  LightInputsRendererParameters_InputType_ROUGHNESS = 3,
  LightInputsRendererParameters_InputType_METALLIC = 4,
  LightInputsRendererParameters_InputType_LightInputsRendererParameters_InputType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightInputsRendererParameters_InputType_LightInputsRendererParameters_InputType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightInputsRendererParameters_InputType_IsValid(int value);
constexpr LightInputsRendererParameters_InputType LightInputsRendererParameters_InputType_InputType_MIN = LightInputsRendererParameters_InputType_INVALID;
constexpr LightInputsRendererParameters_InputType LightInputsRendererParameters_InputType_InputType_MAX = LightInputsRendererParameters_InputType_METALLIC;
constexpr int LightInputsRendererParameters_InputType_InputType_ARRAYSIZE = LightInputsRendererParameters_InputType_InputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightInputsRendererParameters_InputType_descriptor();
template<typename T>
inline const std::string& LightInputsRendererParameters_InputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightInputsRendererParameters_InputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightInputsRendererParameters_InputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightInputsRendererParameters_InputType_descriptor(), enum_t_value);
}
inline bool LightInputsRendererParameters_InputType_Parse(
    const std::string& name, LightInputsRendererParameters_InputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightInputsRendererParameters_InputType>(
    LightInputsRendererParameters_InputType_descriptor(), name, value);
}
enum RendererType : int {
  RT_INVALID = 0,
  RT_SOLID_COLOR = 1,
  RT_DEPTH = 2,
  RT_LIGHT_INPUTS = 3,
  RT_RADIANCE = 4,
  RT_RADIOSITY = 5,
  RendererType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RendererType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RendererType_IsValid(int value);
constexpr RendererType RendererType_MIN = RT_INVALID;
constexpr RendererType RendererType_MAX = RT_RADIOSITY;
constexpr int RendererType_ARRAYSIZE = RendererType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererType_descriptor();
template<typename T>
inline const std::string& RendererType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererType_descriptor(), enum_t_value);
}
inline bool RendererType_Parse(
    const std::string& name, RendererType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererType>(
    RendererType_descriptor(), name, value);
}
// ===================================================================

class SolidColorRendererParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.SolidColorRendererParameters) */ {
 public:
  inline SolidColorRendererParameters() : SolidColorRendererParameters(nullptr) {};
  virtual ~SolidColorRendererParameters();

  SolidColorRendererParameters(const SolidColorRendererParameters& from);
  SolidColorRendererParameters(SolidColorRendererParameters&& from) noexcept
    : SolidColorRendererParameters() {
    *this = ::std::move(from);
  }

  inline SolidColorRendererParameters& operator=(const SolidColorRendererParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolidColorRendererParameters& operator=(SolidColorRendererParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolidColorRendererParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolidColorRendererParameters* internal_default_instance() {
    return reinterpret_cast<const SolidColorRendererParameters*>(
               &_SolidColorRendererParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SolidColorRendererParameters& a, SolidColorRendererParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(SolidColorRendererParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolidColorRendererParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolidColorRendererParameters* New() const final {
    return CreateMaybeMessage<SolidColorRendererParameters>(nullptr);
  }

  SolidColorRendererParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolidColorRendererParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolidColorRendererParameters& from);
  void MergeFrom(const SolidColorRendererParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolidColorRendererParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.SolidColorRendererParameters";
  }
  protected:
  explicit SolidColorRendererParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.SolidColorRendererParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class DepthRendererParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.DepthRendererParameters) */ {
 public:
  inline DepthRendererParameters() : DepthRendererParameters(nullptr) {};
  virtual ~DepthRendererParameters();

  DepthRendererParameters(const DepthRendererParameters& from);
  DepthRendererParameters(DepthRendererParameters&& from) noexcept
    : DepthRendererParameters() {
    *this = ::std::move(from);
  }

  inline DepthRendererParameters& operator=(const DepthRendererParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthRendererParameters& operator=(DepthRendererParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthRendererParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthRendererParameters* internal_default_instance() {
    return reinterpret_cast<const DepthRendererParameters*>(
               &_DepthRendererParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DepthRendererParameters& a, DepthRendererParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthRendererParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthRendererParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepthRendererParameters* New() const final {
    return CreateMaybeMessage<DepthRendererParameters>(nullptr);
  }

  DepthRendererParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthRendererParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthRendererParameters& from);
  void MergeFrom(const DepthRendererParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthRendererParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.DepthRendererParameters";
  }
  protected:
  explicit DepthRendererParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // float alpha = 1;
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:e8.DepthRendererParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float alpha_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class LightInputsRendererParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.LightInputsRendererParameters) */ {
 public:
  inline LightInputsRendererParameters() : LightInputsRendererParameters(nullptr) {};
  virtual ~LightInputsRendererParameters();

  LightInputsRendererParameters(const LightInputsRendererParameters& from);
  LightInputsRendererParameters(LightInputsRendererParameters&& from) noexcept
    : LightInputsRendererParameters() {
    *this = ::std::move(from);
  }

  inline LightInputsRendererParameters& operator=(const LightInputsRendererParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightInputsRendererParameters& operator=(LightInputsRendererParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightInputsRendererParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightInputsRendererParameters* internal_default_instance() {
    return reinterpret_cast<const LightInputsRendererParameters*>(
               &_LightInputsRendererParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LightInputsRendererParameters& a, LightInputsRendererParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(LightInputsRendererParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightInputsRendererParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightInputsRendererParameters* New() const final {
    return CreateMaybeMessage<LightInputsRendererParameters>(nullptr);
  }

  LightInputsRendererParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightInputsRendererParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightInputsRendererParameters& from);
  void MergeFrom(const LightInputsRendererParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightInputsRendererParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.LightInputsRendererParameters";
  }
  protected:
  explicit LightInputsRendererParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LightInputsRendererParameters_InputType InputType;
  static constexpr InputType INVALID =
    LightInputsRendererParameters_InputType_INVALID;
  static constexpr InputType ALBEDO =
    LightInputsRendererParameters_InputType_ALBEDO;
  static constexpr InputType NORMAL =
    LightInputsRendererParameters_InputType_NORMAL;
  static constexpr InputType ROUGHNESS =
    LightInputsRendererParameters_InputType_ROUGHNESS;
  static constexpr InputType METALLIC =
    LightInputsRendererParameters_InputType_METALLIC;
  static inline bool InputType_IsValid(int value) {
    return LightInputsRendererParameters_InputType_IsValid(value);
  }
  static constexpr InputType InputType_MIN =
    LightInputsRendererParameters_InputType_InputType_MIN;
  static constexpr InputType InputType_MAX =
    LightInputsRendererParameters_InputType_InputType_MAX;
  static constexpr int InputType_ARRAYSIZE =
    LightInputsRendererParameters_InputType_InputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputType_descriptor() {
    return LightInputsRendererParameters_InputType_descriptor();
  }
  template<typename T>
  static inline const std::string& InputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputType_Name.");
    return LightInputsRendererParameters_InputType_Name(enum_t_value);
  }
  static inline bool InputType_Parse(const std::string& name,
      InputType* value) {
    return LightInputsRendererParameters_InputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputToVisualizeFieldNumber = 1,
  };
  // .e8.LightInputsRendererParameters.InputType input_to_visualize = 1;
  void clear_input_to_visualize();
  ::e8::LightInputsRendererParameters_InputType input_to_visualize() const;
  void set_input_to_visualize(::e8::LightInputsRendererParameters_InputType value);
  private:
  ::e8::LightInputsRendererParameters_InputType _internal_input_to_visualize() const;
  void _internal_set_input_to_visualize(::e8::LightInputsRendererParameters_InputType value);
  public:

  // @@protoc_insertion_point(class_scope:e8.LightInputsRendererParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int input_to_visualize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class RadianceRendererParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.RadianceRendererParameters) */ {
 public:
  inline RadianceRendererParameters() : RadianceRendererParameters(nullptr) {};
  virtual ~RadianceRendererParameters();

  RadianceRendererParameters(const RadianceRendererParameters& from);
  RadianceRendererParameters(RadianceRendererParameters&& from) noexcept
    : RadianceRendererParameters() {
    *this = ::std::move(from);
  }

  inline RadianceRendererParameters& operator=(const RadianceRendererParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadianceRendererParameters& operator=(RadianceRendererParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadianceRendererParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadianceRendererParameters* internal_default_instance() {
    return reinterpret_cast<const RadianceRendererParameters*>(
               &_RadianceRendererParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RadianceRendererParameters& a, RadianceRendererParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RadianceRendererParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadianceRendererParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadianceRendererParameters* New() const final {
    return CreateMaybeMessage<RadianceRendererParameters>(nullptr);
  }

  RadianceRendererParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadianceRendererParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadianceRendererParameters& from);
  void MergeFrom(const RadianceRendererParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadianceRendererParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.RadianceRendererParameters";
  }
  protected:
  explicit RadianceRendererParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.RadianceRendererParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class RadiosityRendererParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.RadiosityRendererParameters) */ {
 public:
  inline RadiosityRendererParameters() : RadiosityRendererParameters(nullptr) {};
  virtual ~RadiosityRendererParameters();

  RadiosityRendererParameters(const RadiosityRendererParameters& from);
  RadiosityRendererParameters(RadiosityRendererParameters&& from) noexcept
    : RadiosityRendererParameters() {
    *this = ::std::move(from);
  }

  inline RadiosityRendererParameters& operator=(const RadiosityRendererParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadiosityRendererParameters& operator=(RadiosityRendererParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadiosityRendererParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadiosityRendererParameters* internal_default_instance() {
    return reinterpret_cast<const RadiosityRendererParameters*>(
               &_RadiosityRendererParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RadiosityRendererParameters& a, RadiosityRendererParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RadiosityRendererParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadiosityRendererParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadiosityRendererParameters* New() const final {
    return CreateMaybeMessage<RadiosityRendererParameters>(nullptr);
  }

  RadiosityRendererParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadiosityRendererParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadiosityRendererParameters& from);
  void MergeFrom(const RadiosityRendererParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadiosityRendererParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.RadiosityRendererParameters";
  }
  protected:
  explicit RadiosityRendererParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.RadiosityRendererParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class RendererConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:e8.RendererConfiguration) */ {
 public:
  inline RendererConfiguration() : RendererConfiguration(nullptr) {};
  virtual ~RendererConfiguration();

  RendererConfiguration(const RendererConfiguration& from);
  RendererConfiguration(RendererConfiguration&& from) noexcept
    : RendererConfiguration() {
    *this = ::std::move(from);
  }

  inline RendererConfiguration& operator=(const RendererConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererConfiguration& operator=(RendererConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererConfiguration* internal_default_instance() {
    return reinterpret_cast<const RendererConfiguration*>(
               &_RendererConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RendererConfiguration& a, RendererConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererConfiguration* New() const final {
    return CreateMaybeMessage<RendererConfiguration>(nullptr);
  }

  RendererConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererConfiguration& from);
  void MergeFrom(const RendererConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "e8.RendererConfiguration";
  }
  protected:
  explicit RendererConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_renderer_2eproto);
    return ::descriptor_table_renderer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolidColorRendererParamsFieldNumber = 2,
    kDepthRendererParamsFieldNumber = 3,
    kLightInputsRendererParamsFieldNumber = 4,
    kRadianceRendererParamsFieldNumber = 5,
    kRadiosityRendererParamsFieldNumber = 6,
    kInUseRendererTypeFieldNumber = 1,
  };
  // .e8.SolidColorRendererParameters solid_color_renderer_params = 2;
  bool has_solid_color_renderer_params() const;
  private:
  bool _internal_has_solid_color_renderer_params() const;
  public:
  void clear_solid_color_renderer_params();
  const ::e8::SolidColorRendererParameters& solid_color_renderer_params() const;
  ::e8::SolidColorRendererParameters* release_solid_color_renderer_params();
  ::e8::SolidColorRendererParameters* mutable_solid_color_renderer_params();
  void set_allocated_solid_color_renderer_params(::e8::SolidColorRendererParameters* solid_color_renderer_params);
  private:
  const ::e8::SolidColorRendererParameters& _internal_solid_color_renderer_params() const;
  ::e8::SolidColorRendererParameters* _internal_mutable_solid_color_renderer_params();
  public:
  void unsafe_arena_set_allocated_solid_color_renderer_params(
      ::e8::SolidColorRendererParameters* solid_color_renderer_params);
  ::e8::SolidColorRendererParameters* unsafe_arena_release_solid_color_renderer_params();

  // .e8.DepthRendererParameters depth_renderer_params = 3;
  bool has_depth_renderer_params() const;
  private:
  bool _internal_has_depth_renderer_params() const;
  public:
  void clear_depth_renderer_params();
  const ::e8::DepthRendererParameters& depth_renderer_params() const;
  ::e8::DepthRendererParameters* release_depth_renderer_params();
  ::e8::DepthRendererParameters* mutable_depth_renderer_params();
  void set_allocated_depth_renderer_params(::e8::DepthRendererParameters* depth_renderer_params);
  private:
  const ::e8::DepthRendererParameters& _internal_depth_renderer_params() const;
  ::e8::DepthRendererParameters* _internal_mutable_depth_renderer_params();
  public:
  void unsafe_arena_set_allocated_depth_renderer_params(
      ::e8::DepthRendererParameters* depth_renderer_params);
  ::e8::DepthRendererParameters* unsafe_arena_release_depth_renderer_params();

  // .e8.LightInputsRendererParameters light_inputs_renderer_params = 4;
  bool has_light_inputs_renderer_params() const;
  private:
  bool _internal_has_light_inputs_renderer_params() const;
  public:
  void clear_light_inputs_renderer_params();
  const ::e8::LightInputsRendererParameters& light_inputs_renderer_params() const;
  ::e8::LightInputsRendererParameters* release_light_inputs_renderer_params();
  ::e8::LightInputsRendererParameters* mutable_light_inputs_renderer_params();
  void set_allocated_light_inputs_renderer_params(::e8::LightInputsRendererParameters* light_inputs_renderer_params);
  private:
  const ::e8::LightInputsRendererParameters& _internal_light_inputs_renderer_params() const;
  ::e8::LightInputsRendererParameters* _internal_mutable_light_inputs_renderer_params();
  public:
  void unsafe_arena_set_allocated_light_inputs_renderer_params(
      ::e8::LightInputsRendererParameters* light_inputs_renderer_params);
  ::e8::LightInputsRendererParameters* unsafe_arena_release_light_inputs_renderer_params();

  // .e8.RadianceRendererParameters radiance_renderer_params = 5;
  bool has_radiance_renderer_params() const;
  private:
  bool _internal_has_radiance_renderer_params() const;
  public:
  void clear_radiance_renderer_params();
  const ::e8::RadianceRendererParameters& radiance_renderer_params() const;
  ::e8::RadianceRendererParameters* release_radiance_renderer_params();
  ::e8::RadianceRendererParameters* mutable_radiance_renderer_params();
  void set_allocated_radiance_renderer_params(::e8::RadianceRendererParameters* radiance_renderer_params);
  private:
  const ::e8::RadianceRendererParameters& _internal_radiance_renderer_params() const;
  ::e8::RadianceRendererParameters* _internal_mutable_radiance_renderer_params();
  public:
  void unsafe_arena_set_allocated_radiance_renderer_params(
      ::e8::RadianceRendererParameters* radiance_renderer_params);
  ::e8::RadianceRendererParameters* unsafe_arena_release_radiance_renderer_params();

  // .e8.RadiosityRendererParameters radiosity_renderer_params = 6;
  bool has_radiosity_renderer_params() const;
  private:
  bool _internal_has_radiosity_renderer_params() const;
  public:
  void clear_radiosity_renderer_params();
  const ::e8::RadiosityRendererParameters& radiosity_renderer_params() const;
  ::e8::RadiosityRendererParameters* release_radiosity_renderer_params();
  ::e8::RadiosityRendererParameters* mutable_radiosity_renderer_params();
  void set_allocated_radiosity_renderer_params(::e8::RadiosityRendererParameters* radiosity_renderer_params);
  private:
  const ::e8::RadiosityRendererParameters& _internal_radiosity_renderer_params() const;
  ::e8::RadiosityRendererParameters* _internal_mutable_radiosity_renderer_params();
  public:
  void unsafe_arena_set_allocated_radiosity_renderer_params(
      ::e8::RadiosityRendererParameters* radiosity_renderer_params);
  ::e8::RadiosityRendererParameters* unsafe_arena_release_radiosity_renderer_params();

  // .e8.RendererType in_use_renderer_type = 1;
  void clear_in_use_renderer_type();
  ::e8::RendererType in_use_renderer_type() const;
  void set_in_use_renderer_type(::e8::RendererType value);
  private:
  ::e8::RendererType _internal_in_use_renderer_type() const;
  void _internal_set_in_use_renderer_type(::e8::RendererType value);
  public:

  // @@protoc_insertion_point(class_scope:e8.RendererConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::e8::SolidColorRendererParameters* solid_color_renderer_params_;
  ::e8::DepthRendererParameters* depth_renderer_params_;
  ::e8::LightInputsRendererParameters* light_inputs_renderer_params_;
  ::e8::RadianceRendererParameters* radiance_renderer_params_;
  ::e8::RadiosityRendererParameters* radiosity_renderer_params_;
  int in_use_renderer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SolidColorRendererParameters

// -------------------------------------------------------------------

// DepthRendererParameters

// float alpha = 1;
inline void DepthRendererParameters::clear_alpha() {
  alpha_ = 0;
}
inline float DepthRendererParameters::_internal_alpha() const {
  return alpha_;
}
inline float DepthRendererParameters::alpha() const {
  // @@protoc_insertion_point(field_get:e8.DepthRendererParameters.alpha)
  return _internal_alpha();
}
inline void DepthRendererParameters::_internal_set_alpha(float value) {
  
  alpha_ = value;
}
inline void DepthRendererParameters::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:e8.DepthRendererParameters.alpha)
}

// -------------------------------------------------------------------

// LightInputsRendererParameters

// .e8.LightInputsRendererParameters.InputType input_to_visualize = 1;
inline void LightInputsRendererParameters::clear_input_to_visualize() {
  input_to_visualize_ = 0;
}
inline ::e8::LightInputsRendererParameters_InputType LightInputsRendererParameters::_internal_input_to_visualize() const {
  return static_cast< ::e8::LightInputsRendererParameters_InputType >(input_to_visualize_);
}
inline ::e8::LightInputsRendererParameters_InputType LightInputsRendererParameters::input_to_visualize() const {
  // @@protoc_insertion_point(field_get:e8.LightInputsRendererParameters.input_to_visualize)
  return _internal_input_to_visualize();
}
inline void LightInputsRendererParameters::_internal_set_input_to_visualize(::e8::LightInputsRendererParameters_InputType value) {
  
  input_to_visualize_ = value;
}
inline void LightInputsRendererParameters::set_input_to_visualize(::e8::LightInputsRendererParameters_InputType value) {
  _internal_set_input_to_visualize(value);
  // @@protoc_insertion_point(field_set:e8.LightInputsRendererParameters.input_to_visualize)
}

// -------------------------------------------------------------------

// RadianceRendererParameters

// -------------------------------------------------------------------

// RadiosityRendererParameters

// -------------------------------------------------------------------

// RendererConfiguration

// .e8.RendererType in_use_renderer_type = 1;
inline void RendererConfiguration::clear_in_use_renderer_type() {
  in_use_renderer_type_ = 0;
}
inline ::e8::RendererType RendererConfiguration::_internal_in_use_renderer_type() const {
  return static_cast< ::e8::RendererType >(in_use_renderer_type_);
}
inline ::e8::RendererType RendererConfiguration::in_use_renderer_type() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.in_use_renderer_type)
  return _internal_in_use_renderer_type();
}
inline void RendererConfiguration::_internal_set_in_use_renderer_type(::e8::RendererType value) {
  
  in_use_renderer_type_ = value;
}
inline void RendererConfiguration::set_in_use_renderer_type(::e8::RendererType value) {
  _internal_set_in_use_renderer_type(value);
  // @@protoc_insertion_point(field_set:e8.RendererConfiguration.in_use_renderer_type)
}

// .e8.SolidColorRendererParameters solid_color_renderer_params = 2;
inline bool RendererConfiguration::_internal_has_solid_color_renderer_params() const {
  return this != internal_default_instance() && solid_color_renderer_params_ != nullptr;
}
inline bool RendererConfiguration::has_solid_color_renderer_params() const {
  return _internal_has_solid_color_renderer_params();
}
inline void RendererConfiguration::clear_solid_color_renderer_params() {
  if (GetArena() == nullptr && solid_color_renderer_params_ != nullptr) {
    delete solid_color_renderer_params_;
  }
  solid_color_renderer_params_ = nullptr;
}
inline const ::e8::SolidColorRendererParameters& RendererConfiguration::_internal_solid_color_renderer_params() const {
  const ::e8::SolidColorRendererParameters* p = solid_color_renderer_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::SolidColorRendererParameters*>(
      &::e8::_SolidColorRendererParameters_default_instance_);
}
inline const ::e8::SolidColorRendererParameters& RendererConfiguration::solid_color_renderer_params() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.solid_color_renderer_params)
  return _internal_solid_color_renderer_params();
}
inline void RendererConfiguration::unsafe_arena_set_allocated_solid_color_renderer_params(
    ::e8::SolidColorRendererParameters* solid_color_renderer_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solid_color_renderer_params_);
  }
  solid_color_renderer_params_ = solid_color_renderer_params;
  if (solid_color_renderer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.RendererConfiguration.solid_color_renderer_params)
}
inline ::e8::SolidColorRendererParameters* RendererConfiguration::release_solid_color_renderer_params() {
  auto temp = unsafe_arena_release_solid_color_renderer_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::SolidColorRendererParameters* RendererConfiguration::unsafe_arena_release_solid_color_renderer_params() {
  // @@protoc_insertion_point(field_release:e8.RendererConfiguration.solid_color_renderer_params)
  
  ::e8::SolidColorRendererParameters* temp = solid_color_renderer_params_;
  solid_color_renderer_params_ = nullptr;
  return temp;
}
inline ::e8::SolidColorRendererParameters* RendererConfiguration::_internal_mutable_solid_color_renderer_params() {
  
  if (solid_color_renderer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::SolidColorRendererParameters>(GetArena());
    solid_color_renderer_params_ = p;
  }
  return solid_color_renderer_params_;
}
inline ::e8::SolidColorRendererParameters* RendererConfiguration::mutable_solid_color_renderer_params() {
  // @@protoc_insertion_point(field_mutable:e8.RendererConfiguration.solid_color_renderer_params)
  return _internal_mutable_solid_color_renderer_params();
}
inline void RendererConfiguration::set_allocated_solid_color_renderer_params(::e8::SolidColorRendererParameters* solid_color_renderer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solid_color_renderer_params_;
  }
  if (solid_color_renderer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solid_color_renderer_params);
    if (message_arena != submessage_arena) {
      solid_color_renderer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solid_color_renderer_params, submessage_arena);
    }
    
  } else {
    
  }
  solid_color_renderer_params_ = solid_color_renderer_params;
  // @@protoc_insertion_point(field_set_allocated:e8.RendererConfiguration.solid_color_renderer_params)
}

// .e8.DepthRendererParameters depth_renderer_params = 3;
inline bool RendererConfiguration::_internal_has_depth_renderer_params() const {
  return this != internal_default_instance() && depth_renderer_params_ != nullptr;
}
inline bool RendererConfiguration::has_depth_renderer_params() const {
  return _internal_has_depth_renderer_params();
}
inline void RendererConfiguration::clear_depth_renderer_params() {
  if (GetArena() == nullptr && depth_renderer_params_ != nullptr) {
    delete depth_renderer_params_;
  }
  depth_renderer_params_ = nullptr;
}
inline const ::e8::DepthRendererParameters& RendererConfiguration::_internal_depth_renderer_params() const {
  const ::e8::DepthRendererParameters* p = depth_renderer_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::DepthRendererParameters*>(
      &::e8::_DepthRendererParameters_default_instance_);
}
inline const ::e8::DepthRendererParameters& RendererConfiguration::depth_renderer_params() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.depth_renderer_params)
  return _internal_depth_renderer_params();
}
inline void RendererConfiguration::unsafe_arena_set_allocated_depth_renderer_params(
    ::e8::DepthRendererParameters* depth_renderer_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(depth_renderer_params_);
  }
  depth_renderer_params_ = depth_renderer_params;
  if (depth_renderer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.RendererConfiguration.depth_renderer_params)
}
inline ::e8::DepthRendererParameters* RendererConfiguration::release_depth_renderer_params() {
  auto temp = unsafe_arena_release_depth_renderer_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::DepthRendererParameters* RendererConfiguration::unsafe_arena_release_depth_renderer_params() {
  // @@protoc_insertion_point(field_release:e8.RendererConfiguration.depth_renderer_params)
  
  ::e8::DepthRendererParameters* temp = depth_renderer_params_;
  depth_renderer_params_ = nullptr;
  return temp;
}
inline ::e8::DepthRendererParameters* RendererConfiguration::_internal_mutable_depth_renderer_params() {
  
  if (depth_renderer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::DepthRendererParameters>(GetArena());
    depth_renderer_params_ = p;
  }
  return depth_renderer_params_;
}
inline ::e8::DepthRendererParameters* RendererConfiguration::mutable_depth_renderer_params() {
  // @@protoc_insertion_point(field_mutable:e8.RendererConfiguration.depth_renderer_params)
  return _internal_mutable_depth_renderer_params();
}
inline void RendererConfiguration::set_allocated_depth_renderer_params(::e8::DepthRendererParameters* depth_renderer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete depth_renderer_params_;
  }
  if (depth_renderer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(depth_renderer_params);
    if (message_arena != submessage_arena) {
      depth_renderer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth_renderer_params, submessage_arena);
    }
    
  } else {
    
  }
  depth_renderer_params_ = depth_renderer_params;
  // @@protoc_insertion_point(field_set_allocated:e8.RendererConfiguration.depth_renderer_params)
}

// .e8.LightInputsRendererParameters light_inputs_renderer_params = 4;
inline bool RendererConfiguration::_internal_has_light_inputs_renderer_params() const {
  return this != internal_default_instance() && light_inputs_renderer_params_ != nullptr;
}
inline bool RendererConfiguration::has_light_inputs_renderer_params() const {
  return _internal_has_light_inputs_renderer_params();
}
inline void RendererConfiguration::clear_light_inputs_renderer_params() {
  if (GetArena() == nullptr && light_inputs_renderer_params_ != nullptr) {
    delete light_inputs_renderer_params_;
  }
  light_inputs_renderer_params_ = nullptr;
}
inline const ::e8::LightInputsRendererParameters& RendererConfiguration::_internal_light_inputs_renderer_params() const {
  const ::e8::LightInputsRendererParameters* p = light_inputs_renderer_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::LightInputsRendererParameters*>(
      &::e8::_LightInputsRendererParameters_default_instance_);
}
inline const ::e8::LightInputsRendererParameters& RendererConfiguration::light_inputs_renderer_params() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.light_inputs_renderer_params)
  return _internal_light_inputs_renderer_params();
}
inline void RendererConfiguration::unsafe_arena_set_allocated_light_inputs_renderer_params(
    ::e8::LightInputsRendererParameters* light_inputs_renderer_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(light_inputs_renderer_params_);
  }
  light_inputs_renderer_params_ = light_inputs_renderer_params;
  if (light_inputs_renderer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.RendererConfiguration.light_inputs_renderer_params)
}
inline ::e8::LightInputsRendererParameters* RendererConfiguration::release_light_inputs_renderer_params() {
  auto temp = unsafe_arena_release_light_inputs_renderer_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::LightInputsRendererParameters* RendererConfiguration::unsafe_arena_release_light_inputs_renderer_params() {
  // @@protoc_insertion_point(field_release:e8.RendererConfiguration.light_inputs_renderer_params)
  
  ::e8::LightInputsRendererParameters* temp = light_inputs_renderer_params_;
  light_inputs_renderer_params_ = nullptr;
  return temp;
}
inline ::e8::LightInputsRendererParameters* RendererConfiguration::_internal_mutable_light_inputs_renderer_params() {
  
  if (light_inputs_renderer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::LightInputsRendererParameters>(GetArena());
    light_inputs_renderer_params_ = p;
  }
  return light_inputs_renderer_params_;
}
inline ::e8::LightInputsRendererParameters* RendererConfiguration::mutable_light_inputs_renderer_params() {
  // @@protoc_insertion_point(field_mutable:e8.RendererConfiguration.light_inputs_renderer_params)
  return _internal_mutable_light_inputs_renderer_params();
}
inline void RendererConfiguration::set_allocated_light_inputs_renderer_params(::e8::LightInputsRendererParameters* light_inputs_renderer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete light_inputs_renderer_params_;
  }
  if (light_inputs_renderer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(light_inputs_renderer_params);
    if (message_arena != submessage_arena) {
      light_inputs_renderer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light_inputs_renderer_params, submessage_arena);
    }
    
  } else {
    
  }
  light_inputs_renderer_params_ = light_inputs_renderer_params;
  // @@protoc_insertion_point(field_set_allocated:e8.RendererConfiguration.light_inputs_renderer_params)
}

// .e8.RadianceRendererParameters radiance_renderer_params = 5;
inline bool RendererConfiguration::_internal_has_radiance_renderer_params() const {
  return this != internal_default_instance() && radiance_renderer_params_ != nullptr;
}
inline bool RendererConfiguration::has_radiance_renderer_params() const {
  return _internal_has_radiance_renderer_params();
}
inline void RendererConfiguration::clear_radiance_renderer_params() {
  if (GetArena() == nullptr && radiance_renderer_params_ != nullptr) {
    delete radiance_renderer_params_;
  }
  radiance_renderer_params_ = nullptr;
}
inline const ::e8::RadianceRendererParameters& RendererConfiguration::_internal_radiance_renderer_params() const {
  const ::e8::RadianceRendererParameters* p = radiance_renderer_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::RadianceRendererParameters*>(
      &::e8::_RadianceRendererParameters_default_instance_);
}
inline const ::e8::RadianceRendererParameters& RendererConfiguration::radiance_renderer_params() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.radiance_renderer_params)
  return _internal_radiance_renderer_params();
}
inline void RendererConfiguration::unsafe_arena_set_allocated_radiance_renderer_params(
    ::e8::RadianceRendererParameters* radiance_renderer_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiance_renderer_params_);
  }
  radiance_renderer_params_ = radiance_renderer_params;
  if (radiance_renderer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.RendererConfiguration.radiance_renderer_params)
}
inline ::e8::RadianceRendererParameters* RendererConfiguration::release_radiance_renderer_params() {
  auto temp = unsafe_arena_release_radiance_renderer_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::RadianceRendererParameters* RendererConfiguration::unsafe_arena_release_radiance_renderer_params() {
  // @@protoc_insertion_point(field_release:e8.RendererConfiguration.radiance_renderer_params)
  
  ::e8::RadianceRendererParameters* temp = radiance_renderer_params_;
  radiance_renderer_params_ = nullptr;
  return temp;
}
inline ::e8::RadianceRendererParameters* RendererConfiguration::_internal_mutable_radiance_renderer_params() {
  
  if (radiance_renderer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::RadianceRendererParameters>(GetArena());
    radiance_renderer_params_ = p;
  }
  return radiance_renderer_params_;
}
inline ::e8::RadianceRendererParameters* RendererConfiguration::mutable_radiance_renderer_params() {
  // @@protoc_insertion_point(field_mutable:e8.RendererConfiguration.radiance_renderer_params)
  return _internal_mutable_radiance_renderer_params();
}
inline void RendererConfiguration::set_allocated_radiance_renderer_params(::e8::RadianceRendererParameters* radiance_renderer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete radiance_renderer_params_;
  }
  if (radiance_renderer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radiance_renderer_params);
    if (message_arena != submessage_arena) {
      radiance_renderer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiance_renderer_params, submessage_arena);
    }
    
  } else {
    
  }
  radiance_renderer_params_ = radiance_renderer_params;
  // @@protoc_insertion_point(field_set_allocated:e8.RendererConfiguration.radiance_renderer_params)
}

// .e8.RadiosityRendererParameters radiosity_renderer_params = 6;
inline bool RendererConfiguration::_internal_has_radiosity_renderer_params() const {
  return this != internal_default_instance() && radiosity_renderer_params_ != nullptr;
}
inline bool RendererConfiguration::has_radiosity_renderer_params() const {
  return _internal_has_radiosity_renderer_params();
}
inline void RendererConfiguration::clear_radiosity_renderer_params() {
  if (GetArena() == nullptr && radiosity_renderer_params_ != nullptr) {
    delete radiosity_renderer_params_;
  }
  radiosity_renderer_params_ = nullptr;
}
inline const ::e8::RadiosityRendererParameters& RendererConfiguration::_internal_radiosity_renderer_params() const {
  const ::e8::RadiosityRendererParameters* p = radiosity_renderer_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::e8::RadiosityRendererParameters*>(
      &::e8::_RadiosityRendererParameters_default_instance_);
}
inline const ::e8::RadiosityRendererParameters& RendererConfiguration::radiosity_renderer_params() const {
  // @@protoc_insertion_point(field_get:e8.RendererConfiguration.radiosity_renderer_params)
  return _internal_radiosity_renderer_params();
}
inline void RendererConfiguration::unsafe_arena_set_allocated_radiosity_renderer_params(
    ::e8::RadiosityRendererParameters* radiosity_renderer_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiosity_renderer_params_);
  }
  radiosity_renderer_params_ = radiosity_renderer_params;
  if (radiosity_renderer_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:e8.RendererConfiguration.radiosity_renderer_params)
}
inline ::e8::RadiosityRendererParameters* RendererConfiguration::release_radiosity_renderer_params() {
  auto temp = unsafe_arena_release_radiosity_renderer_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::e8::RadiosityRendererParameters* RendererConfiguration::unsafe_arena_release_radiosity_renderer_params() {
  // @@protoc_insertion_point(field_release:e8.RendererConfiguration.radiosity_renderer_params)
  
  ::e8::RadiosityRendererParameters* temp = radiosity_renderer_params_;
  radiosity_renderer_params_ = nullptr;
  return temp;
}
inline ::e8::RadiosityRendererParameters* RendererConfiguration::_internal_mutable_radiosity_renderer_params() {
  
  if (radiosity_renderer_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::e8::RadiosityRendererParameters>(GetArena());
    radiosity_renderer_params_ = p;
  }
  return radiosity_renderer_params_;
}
inline ::e8::RadiosityRendererParameters* RendererConfiguration::mutable_radiosity_renderer_params() {
  // @@protoc_insertion_point(field_mutable:e8.RendererConfiguration.radiosity_renderer_params)
  return _internal_mutable_radiosity_renderer_params();
}
inline void RendererConfiguration::set_allocated_radiosity_renderer_params(::e8::RadiosityRendererParameters* radiosity_renderer_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete radiosity_renderer_params_;
  }
  if (radiosity_renderer_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radiosity_renderer_params);
    if (message_arena != submessage_arena) {
      radiosity_renderer_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiosity_renderer_params, submessage_arena);
    }
    
  } else {
    
  }
  radiosity_renderer_params_ = radiosity_renderer_params;
  // @@protoc_insertion_point(field_set_allocated:e8.RendererConfiguration.radiosity_renderer_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::e8::LightInputsRendererParameters_InputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::LightInputsRendererParameters_InputType>() {
  return ::e8::LightInputsRendererParameters_InputType_descriptor();
}
template <> struct is_proto_enum< ::e8::RendererType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::RendererType>() {
  return ::e8::RendererType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_renderer_2eproto
